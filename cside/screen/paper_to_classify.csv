"Jia C., Cai Y., Yu Y.T., Tse T.H.";"5W+1H pattern: A perspective of systematic mapping studies and a case study on cloud software testing";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84923328222&partnerID=40&md5=ab9586291eb660686744b0d525513668;"A common type of study used by researchers to map out the landscape of a research topic is known as mapping study. Such a study typically begins with an exploratory search on the possible ideas of the research topic, which is often done in an unsystematic manner. Hence, the activity of formulating research questions in mapping studies is ill-defined, rendering it difficult for researchers who are new to the topic. There is a need to guide them kicking off a mapping study of an unfamiliar domain. This paper proposes a 5W+1H pattern to help investigators systematically examine a generic set of dimensions in a mapping study toward the formulation of research questions before identifying, reading, and analyzing sufficient articles of the topic. We have validated the feasibility of our proposal by conducting a case study of a mapping study on cloud software testing, that is, software testing for and on cloud computing platforms. The case study reveals that the 5W+1H pattern can lead investigators to define a set of systematic, generic, and complementary research questions, enabling them to kick off and expedite the mapping study process in a well-defined manner. We also share our experiences and lessons learned from our case study on the use of the 5W+1H pattern in mapping studies. © 2015 Elsevier Inc. All rights reserved.";"5W+1H pattern, Cloud software testing, Systematic mapping study"
"Carroll C., Falessi D., Forney V., Frances A., Izurieta C., Seaman C.";"A Mapping Study of Software Causal Factors for Improving Maintenance";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961661951&partnerID=40&md5=692d940e823529be710d2f4f2ee0307f;"Context: Software maintenance is important to keep existing software systems functional for organizations or users that depend on that software. Goal: We aim to identify the factors, i.e., software characteristics such as code complexity, leading to maintenance problems. Method: We present a Mapping Study (MS) on controlled experiments that investigated software characteristics related to defects during maintenance. Results: The search strategy identified 78 papers, of which 9 have been included in our study, dated from 1985 to 2013, after applying our inclusion and exclusion criteria. We extracted data from these papers to identify the research methods, and the independent, dependent, blocked, and measured variables. Conclusions: Our MS results point to a weak evidence on software factors causing defects during maintenance. Stronger evidence can be developed via more controlled experiments that address multiple independent variables and hold the software objects constant. © 2015 IEEE.";"controlled experiments, defects, mapping study, Software maintenance, systematic literature review"
"Lopez-Herrejon R.E., Fischer S., Ramler R., Egyed A.";"A first systematic mapping study on combinatorial interaction testing for software product lines";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84934343294&partnerID=40&md5=ec6b20b311c1f97790d067319331ba4d;"Software Product Lines (SPLs) are families of related software systems distinguished by the set of features each one provides. Over the past decades SPLs have been the subject of extensive research and application both in academia and industry. SPLs practices have proven benefits such as better product customization and reduced time to market. Testing SPLs pose additional challenges stemming from the typically large number of product variants which make it infeasible to test every single one of them. In recent years, there has been an extensive research on applying Combinatorial Interaction Testing (CIT) for SPL testing. In this paper we present the first systematic mapping study on this subject. Our research questions aim to gather information regarding the techniques that have been applied, the nature of the case studies used for their evaluation, and what phases of CIT have been addressed. Our goal is to identify common trends, gaps, and opportunities for further research and application. © 2015 IEEE.,";
"Garousi V., Mäntylä M.V.";"A systematic literature review of literature reviews in software testing";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84987968030&partnerID=40&md5=39f3eeecc191a79349289ea4d0d321f6;"Context Any newcomer or industrial practitioner is likely to experience difficulties in digesting large volumes of knowledge in software testing. In an ideal world, all knowledge used in industry, education and research should be based on high-quality evidence. Since no decision should be made based on a single study, secondary studies become essential in presenting the evidence. According to our search, over 101 secondary studies have been published in the area of software testing since 1994. With this high number of secondary studies, it is important to conduct a review in this area to provide an overview of the research landscape in this area. Objective The goal of this study is to systematically map (classify) the secondary studies in software testing. We propose that tertiary studies can serve as summarizing indexes which facilitate finding the most relevant information from secondary studies and thus supporting evidence-based decision making in any given area of software engineering. Our research questions (RQs) investigate: (1) Software-testing-specific areas, (2) Types of RQs investigated, (3) Numbers and Trends, and (4) Citations of the secondary studies. Method To conduct the tertiary study, we use the systematic-mapping approach. Additionally, we contrast the testing topics to the number of Google hits to address a general popularity of a testing topic and study the most popular papers in terms of citations. We furthermore demonstrate the practicality and usefulness of our results by mapping them to ISTQB foundation syllabus and to SWEBOK to provide implications for practitioners, testing educators, and researchers. Results After a systematic search and voting process, our study pool included 101 secondary studies in the area of software testing between 1994 and 2015. Among our results are the following: (1) In terms of number of secondary studies, model-based approach is the most popular testing method, web services are the most popular system under test (SUT), while regression testing is the most popular testing phase, (2) The quality of secondary studies, as measured by a criteria set established in the community, is slowly increasing as the years go by, and (3) Analysis of research questions, raised and studied in the pool of secondary studies, showed that there is a lack of causality and relationship type of research questions, a situation which needs to be improved if we, as a community, want to advance as a scientific field. (4) Among secondary studies, we found that regular surveys receive significantly more citations than SMs (p = 0.009) and SLRs (p = 0.014). Conclusion Despite the large number of secondary studies, we found that many important areas of software testing currently lack secondary studies, e.g., test management, role of product risk in testing, human factors in software testing, beta-testing (A/B-testing), exploratory testing, testability, test stopping criteria, and test-environment development. Having secondary studies in those areas is important for satisfying industrial and educational needs in software testing. On the other hand, education material of ISTQB foundation syllabus and SWEBOK could benefit from the inclusion of the latest research topics, namely search-based testing, use of cloud-computing for testing and symbolic execution. © 2016 Elsevier B.V.";"Secondary studies, Software testing, Surveys, Systematic literature reviews, Systematic mapping, Tertiary study"
"Brito M.A.S., Santos M.P., Souza S.R.S., Souza P.S.L.";"A systematic mapping of data generation for integration software testing";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988345153&partnerID=40&md5=f10417d2aad10c1c762d0ff6ba8926ac;"Different techniques have been proposed to test software artifacts and source code. Integration testing, however, has not been sufficiently applied to all types of systems that require high-quality evaluation. This paper summarizes approaches proposed to test data generation for integration testing identifying gaps and opportunities for further research. We conducted a systematic mapping study in order to discover how data generation for integration testing is supported by existing approaches. A subjective evaluation of the studies was also carried out to evaluate them in terms of quality. As a result of the systematic mapping we found 38 primary studies, published between 1996 and 2015. Most of them focus on specification-based coverage, and to a lesser extent, code coverage. The following trends were identified: increased use of UML models and concern regarding automated test data generation. Gaps were found in the use of gray-box approaches, mutation testing, data generation tools, and experimental validation studies. The study's findings enable researchers to attain an overview of existing approaches and identify points that require further attention. Future research work should look at cost and effectiveness of such approaches.,";
"Da Mota Silveira Neto P.A., Carmo MacHado I.D., McGregor J.D., De Almeida E.S., De Lemos Meira S.R.";"A systematic mapping study of software product lines testing";https://www.scopus.com/inward/record.uri?eid=2-s2.0-79952451558&partnerID=40&md5=a966054f3f281e0f2e4234c8bea7f399;"Context: In software development, Testing is an important mechanism both to identify defects and assure that completed products work as specified. This is a common practice in single-system development, and continues to hold in Software Product Lines (SPL). Even though extensive research has been done in the SPL Testing field, it is necessary to assess the current state of research and practice, in order to provide practitioners with evidence that enable fostering its further development. Objective: This paper focuses on Testing in SPL and has the following goals: investigate state-of-the-art testing practices, synthesize available evidence, and identify gaps between required techniques and existing approaches, available in the literature. Method: A systematic mapping study was conducted with a set of nine research questions, in which 120 studies, dated from 1993 to 2009, were evaluated. Results: Although several aspects regarding testing have been covered by single-system development approaches, many cannot be directly applied in the SPL context due to specific issues. In addition, particular aspects regarding SPL are not covered by the existing SPL approaches, and when the aspects are covered, the literature just gives brief overviews. This scenario indicates that additional investigation, empirical and practical, should be performed. Conclusion: The results can help to understand the needs in SPL Testing, by identifying points that still require additional investigation, since important aspects regarding particular points of software product lines have not been addressed yet. © 2010 Elsevier B.V. All rights reserved.";"Mapping study, Software product lines, Software testing"
"Afzal W., Torkar R., Feldt R.";"A systematic mapping study on non-functional search-based software testing";https://www.scopus.com/inward/record.uri?eid=2-s2.0-79952453274&partnerID=40&md5=0d3653455ce936d871b57b8f516b2988;"Automated software test generation has been applied across the spectrum of test case design methods, this includes white-box (structural), black-box (functional), grey-box (combination of structural and functional) and non-functional testing. In this paper, we undertake a systematic mapping study to present a broad review of primary studies on the application of search-based optimization techniques to non-functional testing. The motivation is to identify the evidence available on the topic and to identify gaps in the application of search-based optimization techniques to different types of non-functional testing. The study is based on a comprehensive set of 35 papers obtained after using a multi-stage selection criteria and are published in workshops, conferences and journals in the time span 1996-2007. We conclude that the search-based software testing community needs to do more and broader studies on non-functional search-based software testing (NFSBST) and the results from our systematic map can help direct such efforts.,";
"Barreiros E., Almeida A., Saraiva J., Soares S.";"A systematic mapping study on software engineering testbeds";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84858737751&partnerID=40&md5=ea351c7fbb76a17afc002da9e7fa4d10;"Even though empirical research has grown in interest, techniques, methodologies and best practices are still in debate. In this context, testbeds are effective when one needs to evaluate and compare technologies. The concept is well disseminated in other areas such as Computer Networks, but remains poorly explored in Software Engineering (SE). This paper presents a systematic mapping study on the SE testbeds literature. From the initial set of 4239 studies, 13 primary studies were selected and categorized. Based on that, we found that Software Architecture is the most investigated topic, controlled experiment is the most used method to evaluate such testbeds, 20 benefits of using testbeds in SE have been identified and that testbeds comprise very heterogeneous structural elements. © 2011 IEEE.";"Empirical software engineering, Technology evaluation, Technology transfer, Testbeds"
"Barmi Z.A., Ebrahimi A.H., Feldt R.";"Alignment of requirements specification and testing: A systematic mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051659665&partnerID=40&md5=946d9ca5308f2b04884f4276b6c2a12e;"Requirements should specify expectations on a software system and testing should ensure these expectations are met. Thus, to enable high product quality and efficient development it is crucial that requirements and testing activities and information are aligned. A lot of research has been done in the respective fields Requirements Engineering and Testing but there is a lack of summaries of the current state of the art on how to link the two. This study presents a systematic mapping of the alignment of specification and testing of functional or nonfunctional requirements in order to identify useful approaches and needs for future research. In particular we focus on results relevant for nonfunctional requirements but since only a few studies was found on alignment in total we also cover the ones on functional requirements. The map summarizes the 35 relevant papers found and discuss them within six major sub categories with model-based testing and traceability being the ones with most prior results. © 2011 IEEE.,";
"Kasoju A., Petersen K., Mäntylä M.V.";"Analyzing an automotive testing process with evidence-based software engineering";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84877922741&partnerID=40&md5=b6dc2fcdca02a51db47c5925cfbaaa66;"Context: Evidence-based software engineering (EBSE) provides a process for solving practical problems based on a rigorous research approach. The primary focus so far was on mapping and aggregating evidence through systematic reviews. Objectives: We extend existing work on evidence-based software engineering by using the EBSE process in an industrial case to help an organization to improve its automotive testing process. With this we contribute in (1) providing experiences on using evidence based processes to analyze a real world automotive test process and (2) provide evidence of challenges and related solutions for automotive software testing processes. Methods: In this study we perform an in-depth investigation of an automotive test process using an extended EBSE process including case study research (gain an understanding of practical questions to define a research scope), systematic literature review (identify solutions through systematic literature), and value stream mapping (map out an improved automotive test process based on the current situation and improvement suggestions identified). These are followed by reflections on the EBSE process used. Results: In the first step of the EBSE process we identified 10 challenge areas with a total of 26 individual challenges. For 15 out of those 26 challenges our domain specific systematic literature review identified solutions. Based on the input from the challenges and the solutions, we created a value stream map of the current and future process. Conclusions: Overall, we found that the evidence-based process as presented in this study helps in technology transfer of research results to industry, but at the same time some challenges lie ahead (e.g. scoping systematic reviews to focus more on concrete industry problems, and understanding strategies of conducting EBSE with respect to effort and quality of the evidence). © 2013 Elsevier B.V. All rights reserved.";"Automotive software testing, Evidence-based software engineering, Process assessment"
"Cavalcanti Y.C., Da Mota Silveira Neto P.A., Machado I.D.C., Vale T.F., De Almeida E.S., Meira S.R.D.L.";"Challenges and opportunities for software change request repositories: A systematic mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904626790&partnerID=40&md5=7e8fe6e32dba1cdb6f3f9a3e39b3fed1;"Software maintenance starts as soon as the first artifacts are delivered and is essential for the success of the software. However, keeping maintenance activities and their related artifacts on track comes at a high cost. In this respect, change request (CR) repositories are fundamental in software maintenance. They facilitate the management of CRs and are also the central point to coordinate activities and communication among stakeholders. However, the benefits of CR repositories do not come without issues, and commonly occurring ones should be dealt with, such as the following: duplicate CRs, the large number of CRs to assign, or poorly described CRs. Such issues have led researchers to an increased interest in investigating CR repositories, by considering different aspects of software development and CR management. In this paper, we performed a systematic mapping study to characterize this research field. We analyzed 142 studies, which we classified in two ways. First, we classified the studies into different topics and grouped them into two dimensions: challenges and opportunities. Second, the challenge topics were classified in accordance with an existing taxonomy for information retrieval models. In addition, we investigated tools and services for CR management, to understand whether and how they addressed the topics identified. Copyright © 2013 John Wiley & Sons, Ltd. Change request repositories are fundamental for software maintenance. However, their benefits do not come without issues. We analyzed 142 studies to characterize the research on these issues and provide directions for future investigation. The studies were classified into topics and grouped into two dimensions: challenges and opportunities. Then, the challenges were classified in accordance with an existing taxonomy for information retrieval models. Additionally, we investigated different change request repositories to understand whether and how they addressed the topics identified. Copyright © 2013 John Wiley & Sons, Ltd.";"bug report, bug tracking, change request repository, software evolution, software maintenance, software quality assurance"
"Brink C., Heisig P., Wackermann F.";"Change impact in product lines: A systematic mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988892509&partnerID=40&md5=e13d8fd1207f2f064c58fb7a85a09838;"A product line (PL) supports and simplifies the development process of (software) systems by reusing assets. As systems are subjected to frequent alterations, the implementation of this changes can be a complex and error-prone task. For this reason a change impact analysis (CIA) systematically identifies locations that are affected by a change. While both approaches (PL and CIA) per se are often discussed in literature, the combination of them is still a challenge. This paper gives a comprehensive overview of literature, which addresses the integration of PL and CIA concepts. Furthermore, we classify our results to outline both, the current research stage as well as gaps. Therefore, we conducted a systematic mapping study incorporating 165 papers. While most of the papers have their background within Software Product Lines (SPLs) (44.2%) or PLs (5.5%), CIA in the combination with Multi Product Lines (2.4%) or Product Families (PFs) (1.8%) is sparsely addressed in literature. The results show that CIA for SPLs has been partially addressed yet, whereas the consideration of different disciplines (PFs) is insufficiently covered. © Springer International Publishing Switzerland 2016.";"Change impact analysis, Embedded systems, Hardware/Software, Product family, Product line, Systematic mapping study"
"Nissola F., Benitti F.B.V.";"Characteristics, attributes, metrics and usability recommendations: A systematic mapping";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84966602566&partnerID=40&md5=7b11e8b0f75c1d4766c99f68b59e8772;"The research scenario concerned about software usability addresses a wide range of characteristics, attributes and evaluation models. As result, we can observe the evaluators difficult in order to select the characteristics that best apply to the product that is being evaluated. By this way, this paper presents a systematic mapping in order to identify the main characteristics of usability evaluation related to web, desktop and mobile devices environments. As results, we selected 31 papers in order to perform data extraction and way possible to produce a list of 28 evaluation characteristics. Copyright © IARIA, 2014.";"Systematic Mapping, Usability Evaluation"
"Melo S.M., Souza S.R.S., Silva R.A., Souza P.S.L.";"Concurrent software testing in practice: A catalog of tools";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84960350804&partnerID=40&md5=5490f6be1c5b623eff6d7593c770b4cd;"The testing of concurrent programs is very complex due to the non-determinism present in those programs. They must be subjected to a systematic testing process that assists in the identification of defects and guarantees quality. Although testing tools have been proposed to support the concurrent program testing, to the best of our knowledge, no study that concentrates all testing tools to be used as a catalog for testers is available in the literature. This paper proposes a new classification for a set of testing tools for concurrent programs, regarding attributes, such as testing technique supported, programming language, and paradigm of development. The purpose is to provide a useful categorization guide that helps testing practitioners and researchers in the selection of testing tools for concurrent programs. A systematic mapping was conducted so that studies on testing tools for concurrent programs could be identified. As a main result, we provide a catalog with 116 testing tools appropriately selected and classified, among which the following techniques were identifies with higher support were Java and C/C++. Although a large number of tools have been categoirzed, most of them are academic and only few are available on a commercial scale. The classification proposed here can contribute to the state-of-the-art of testing tools for concurrent programs and also provides information for the exchange of knowledge between academy and industry. © 2015 ACM.";"Concurrent programs, Systematic mapping, Testing tools"
"Zhi J., Garousi-Yusifo?lu V., Sun B., Garousi G., Shahnewaz S., Ruhe G.";"Cost, benefits and quality of software development documentation: A systematic mapping";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84912534729&partnerID=40&md5=5a2b8c80ac6e71817e1fa2ffb79f59fc;"Context: Software documentation is an integral part of any software development process. Researchers and practitioners have expressed concerns about costs, benefits and quality of software documentation in practice. On the one hand, there is a lack of a comprehensive model to evaluate the quality of documentation. On the other hand, researchers and practitioners need to assess whether documentation cost outweighs its benefit. Objectives: In this study, we aim to summarize the existing literature and provide an overview of the field of software documentation cost, benefit and quality. Method: We use the systematic-mapping methodology to map the existing body of knowledge related to software documentation cost, benefit and quality. To achieve our objectives, 11 Research Questions (RQ) are raised. The primary papers are carefully selected. After applying the inclusion and exclusion criteria, our study pool included a set of 69 papers from 1971 to 2011. A systematic map is developed and refined iteratively. Results: We present the results of a systematic mapping covering different research aspects related to software documentation cost, benefit and quality (RQ 1-11). Key findings include: (1) validation research papers are dominating (27 papers), followed by solution proposals (21 papers). (2) Most papers (61 out of 69) do not mention the development life-cycle model explicitly. Agile development is only mentioned in 6 papers. (3) Most papers include only one System under Study (SUS) which is mostly academic prototype. The average number of participants in survey-based papers is 106, the highest one having approximately 1000 participants. (4) In terms of focus of papers, 50 papers focused on documentation quality, followed by 37 papers on benefit, and 12 papers on documentation cost. (5) The quality attributes of documentation that appear in most papers are, in order: completeness, consistency and accessibility. Additionally, improved meta-models for documentation cost, benefit and quality are also presented. Furthermore, we have created an online paper repository of the primary papers analyzed and mapped during this study. Conclusion: Our study results show that this research area is emerging but far from mature. Firstly, documentation cost aspect seems to have been neglected in the existing literature and there are no systematic methods or models to measure cost. Also, despite a substantial number of solutions proposed during the last 40 years, more and stronger empirical evidences are still needed to enhance our understanding of this area. In particular, what we expect includes (1) more validation or evaluation studies, (2) studies involving large-scale development projects, or from large number of study participants of various organizations, (3) more industry-academia collaborations, (4) more estimation models or methods to assess documentation quality, benefit and, especially, cost. © 2014 Elsevier Inc. All rights reserved.";"Documentation benefit, Software documentation, Systematic mapping"
"Fernández-Sáez A.M., Genero M., Chaudron M.R.V.";"Empirical studies concerning the maintenance of UML diagrams and their use in the maintenance of code: A systematic mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84877909370&partnerID=40&md5=b548f09fd4efa3d1319209f1db1125a6;"Context: The Unified Modelling Language (UML) has, after ten years, become established as the de facto standard for the modelling of object-oriented software systems. It is therefore relevant to investigate whether its use is important as regards the costs involved in its implantation in industry being worthwhile. Method: We have carried out a systematic mapping study to collect the empirical studies published in order to discover What is the current existing empirical evidence with regard to the use of UML diagrams in source code maintenance and the maintenance of the UML diagrams themselves? Results: We found 38 papers, which contained 63 experiments and 3 case studies. Conclusion: Although there is common belief that the use of UML is beneficial for source code maintenance, since the quality of the modifications is greater when UML diagrams are available, only 3 papers concerning this issue have been published. Most research (60 empirical studies) concerns the maintainability and comprehensibility of the UML diagrams themselves which form part of the system's documentation, since it is assumed that they may influence source code maintainability, although this has not been empirically validated. Moreover, the generalizability of the majority of the experiments is questionable given the material, tasks and subjects used. There is thus a need for more experiments and case studies to be performed in industrial contexts, i.e., with real systems and using maintenance tasks conducted by practitioners under real conditions that truly show the utility of UML diagrams in maintaining code, and that the fact that a diagram is more comprehensible or modifiable influences the maintainability of the code itself. This utility should also be studied from the viewpoint of cost and productivity, and the consistent and simultaneous maintenance of diagrams and code must also be considered in future empirical studies. © 2013 Elsevier B.V. All rights reserved.";"Empirical studies, Software maintenance, Systematic literature review, Systematic mapping study, UML"
"Ouhbi S., Idri A., Aleman J.L.F., Toval A.";"Evaluating software product quality: A systematic mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84924054129&partnerID=40&md5=19c52fa109db72d3bcb6b46d8b326ee1;"Evaluating software product quality (SPQ) is an important task to ensure the quality of software products. In this paper a systematic mapping study was performed to summarize the existing SPQ evaluation (SPQE) approaches in literature and to classify the selected studies according to seven classification criteria: SPQE approaches, research types, empirical types, data sets used in the empirical evaluation of these studies, artifacts, SQ models, and SQ characteristics. Publication channels and trends were also identified. 57 papers were selected. The results show that the main publication sources of the papers identified were journals. Data mining techniques are the most frequently approaches reported in literature. Solution proposals were the main research type identified. The majority of the selected papers were history-based evaluations using existing data, which were mainly obtained from open source software projects and domain specific projects. Source code was the main artifacts used by SPQE approaches. Well-known SQ models were mentioned by half of the selected papers and reliability is the SQ characteristic through which SPQE was mainly achieved. SPQE-related subjects seem to attract more interest from researchers since the past years. © 2014 IEEE.,";
"Assunção W.K.G., Vergilio S.R.";"Feature location for software product line migration: A mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84907833307&partnerID=40&md5=48b514819a4aba2c01c7cea8bb911254;"Developing software from scratch is a high cost and errorprone activity. A possible solution to reduce time-to-market and produce high quality software is the reuse of existing software. But when the number of features in the system grows, the maintenance becomes more complex. In such cases, to adopt a systematic approach, such as Software Product Line Engineering, is necessary. Existing systems are generally migrated to a product line, allowing systematic reuse of artefacts and easing maintenance. To this end, some approaches have been proposed in the literature in the last years. A mapping of works on this subject and the identification of some research gaps can lead to an improvement of such approaches. This paper describes the main outcomes of a systematic mapping study on the evolution and migration of systems to SPL. The main works found are presented and classified according to adopted strategy, artefacts used, and evaluation conducted. Analysis of the evolution along the past years are also presented. At the end, we summarize some trends and open issues to serve as reference to new researches. Copyright 2014 ACM.";"Evolution, Reengineering, Reuse, Software product line"
"Banerjee I., Nguyen B., Garousi V., Memon A.";"Graphical user interface (GUI) testing: Systematic mapping and repository";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880786120&partnerID=40&md5=6a4843e704cb6d905ce9da59d7d402ad;"Context GUI testing is system testing of a software that has a graphical-user interface (GUI) front-end. Because system testing entails that the entire software system, including the user interface, be tested as a whole, during GUI testing, test cases - modeled as sequences of user input events - are developed and executed on the software by exercising the GUI's widgets (e.g., text boxes and clickable buttons). More than 230 articles have appeared in the area of GUI testing since 1991. Objective In this paper, we study this existing body of knowledge using a systematic mapping (SM). Method The SM is conducted using the guidelines proposed by Petersen et al. We pose three sets of research questions. We define selection and exclusion criteria. From the initial pool of 230 articles, published in years 1991-2011, our final pool consisted of 136 articles. We systematically develop a classification scheme and map the selected articles to this scheme. Results We present two types of results. First, we report the demographics and bibliometrics trends in this domain, including: top-cited articles, active researchers, top venues, and active countries in this research area. Moreover, we derive the trends, for instance, in terms of types of articles, sources of information to derive test cases, types of evaluations used in articles, etc. Our second major result is a publicly-accessible repository that contains all our mapping data. We plan to update this repository on a regular basis, making it a live resource for all researchers. Conclusion Our SM provides an overview of existing GUI testing approaches and helps spot areas in the field that require more attention from the research community. For example, much work is needed to connect academic model-based techniques with commercially available tools. To this end, studies are needed to compare the state-of-the-art in GUI testing in academic techniques and industrial tools. © 2013 Elsevier B.V. All rights reserved.";"Bibliometrics, GUI application, Paper repository, Systematic mapping, Testing"
"Gonzalez-Ladron-De-Guevara F., Fernández-Diego M.";"ISBSG variables most frequently used for software effort estimation: A mapping review";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84907808906&partnerID=40&md5=cf63a03ed883a32324a27bd726f9a00e;"Background: The International Software Benchmarking Standards Group (ISBSG) dataset makes it possible to estimate a project's size, effort, duration, and cost. Aim: The aim was to analyze the ISBSG variables that have been used by researchers for software effort estimation from 2000, when the first papers were published, until the end of 2013. Method: A systematic mapping review was applied to over 167 papers obtained after the filtering process. From these, it was found that 133 papers produce effort estimation and only 107 list the independent variables used in the effort estimation models. Results: Seventy-one out of 118 ISBSG variables have been used at least once. There is a group of 20 variables that appear in more than 50% of the papers and include Functional Size (62%), Development Type (58%), Language Type (53%), and Development Platform (52%) following ISBSG recommendations. Sizing and Size attributes altogether represent the most relevant group along with Project attributes that includes 24 technical features of the project and the development platform. All in all, variables that have more missing values are used less frequently. Conclusions: This work presents a snapshot of the existing usage of ISBSG variables in software development estimation. Moreover, some insights are provided to guide future studies. © 2014 ACM.";"ISBSG, missing values, software effort estimation, software engineering, systematic mapping study"
"Souza E.F., Falbo R.A., Vijaykumar N.L.";"Knowledge management applied to software testing: A systematic mapping";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84922663129&partnerID=40&md5=f38645ba853196e34678283ee883a71e;"With the growth of data from several different sources of knowledge within an organization, it becomes necessary to provide computerized support for tasks of acquiring, processing, analyzing and disseminating knowledge. In the software process, testing is a critical factor for product quality, and thus there is an increasing concern in how to improve the accomplishment of this task. In software testing, finding relevant knowledge to reuse can be a difficult and complex task, due to the lack of a strategy to represent or to associate semantics to a large volume of test data, including test cases, testing techniques to be applied and so on. This paper aims to investigate, through a Systematic Mapping of the Literature, some aspects associated with applying Knowledge Management to Software Testing. Copyright © 2013 by Knowledge Systems Institute Graduate School.";"Knowledge management, Software testing, Systematic mapping"
"Ouhbi S., Idri A., Fer?andez-Alemán J.L., Toval A.";"Predicting software product quality: A systematic mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84943600627&partnerID=40&md5=27f0050c8409ce3cf88e684e2a45a4b4;"Predicting software product quality (SPQ) is becoming a permanent concern during software life cycle phases. In this paper, a systematic mapping study was performed to summarize the existing SPQ prediction (SPQP) approaches in literature and to organize the selected studies according to seven classification criteria: SPQP approaches, research types, empirical types, data sets used in the empirical evaluation of these studies, artifacts, SQ models, and SQ characteristics. Publication channels and trends were also identified. After identifying 182 documents in ACM Digital Library, IEEE Xplore, ScienceDirect, SpringerLink, and Google scholar, 69 papers were selected. The results show that the main publication source of the papers identified was conference. Data mining techniques are the most frequently SPQP approaches reported in literature. Solution proposal was the main research type identified. The majority of the papers selected were history-based evaluations using existing data which were mainly obtained from open source software projects and domain specific projects. Source code was the main artifact concerned with SPQP approaches. Well-known SQ models were hardly mentioned and reliability is the SQ characteristic through which SPQP was mainly achieved. SPQP-related subject seems to need more investigation from researchers and practitioners. Moreover, SQ models and standards need to be considered more in future SPQP research.";"Prediction, Software product quality, Systematic mapping study"
"Elberzhager F., Rosbach A., Münch J., Eschbach R.";"Reducing test effort: A systematic mapping study on existing approaches";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84863453536&partnerID=40&md5=2d892e6bc6835d86cc6e6c508857db8f;"Context: Quality assurance effort, especially testing effort, is often a major cost factor during software development, which sometimes consumes more than 50% of the overall development effort. Consequently, one major goal is often to reduce testing effort. Objective: The main goal of the systematic mapping study is the identification of existing approaches that are able to reduce testing effort. Therefore, an overview should be presented both for researchers and practitioners in order to identify, on the one hand, future research directions and, on the other hand, potential for improvements in practical environments. Method: Two researchers performed a systematic mapping study, focusing on four databases with an initial result set of 4020 articles. Results: In total, we selected and categorized 144 articles. Five different areas were identified that exploit different ways to reduce testing effort: approaches that predict defect-prone parts or defect content, automation, test input reduction approaches, quality assurance techniques applied before testing, and test strategy approaches. Conclusion: The results reflect an increased interest in this topic in recent years. A lot of different approaches have been developed, refined, and evaluated in different environments. The highest attention was found with respect to automation and prediction approaches. In addition, some input reduction approaches were found. However, in terms of combining early quality assurance activities with testing to reduce test effort, only a small number of approaches were found. Due to the continuous challenge of reducing test effort, future research in this area is expected. © 2012 Elsevier B.V. All rights reserved.";"Efficiency improvement, Mapping study, Quality assurance, Software testing, Test effort reduction"
"Lobato L.L., Bittar T.J., Neto P.A.D.M.S., MacHado I.D.C., De Almeida E.S., Meira S.R.D.L.";"Risk management in software product line engineering: A mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84881014807&partnerID=40&md5=83fe16cebf1cd3ccebfb7b597fcd2cae;"Software Product Line (SPL) Engineering focuses on systematic software reuse, which has benefits such as reductions in time-to-market and effort, and improvements in the quality of products. However, establishing a SPL is not a simple matter, and can affect all aspects of the organization, since the approach is complex and involves major investment and considerable risk. These risks can have a negative impact on the expected ROI for an organization, if SPL is not sufficiently managed. This paper presents a mapping study of Risk Management (RM) in SPL Engineering. We analyzed a set of thirty studies in the field. The results points out the need for risk management practices in SPL, due to the little research on RM practices in SPL and the importance of identifying insight on RM in SPL. Most studies simply mention the importance of RM, however the steps for managing risk are not clearly specified. Our findings suggest that greater attention should be given, through the use of industrial case studies and experiments, to improve SPL productivity and ensure its success. This research is a first attempt within the SPL community to identify, classify, and manage risks, and establish mitigation strategies. © 2013 World Scientific Publishing Company.";"Mapping study, Risk management, Software product lines"
"Murillo-Morera J., Quesada-López C., Jenkins M.";"Software fault prediction: A systematic mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84936110818&partnerID=40&md5=f18253acbe762249e0a5803739257b51;"Context: Software fault prediction has been an important research topic in the software engineering field for more than 30 years. Software defect prediction models are commonly used to detect faulty software modules based on software metrics collected during the software development process. Objective: Data mining techniques and machine learning studies in the fault prediction software context are mapped and characterized. We investigated the metrics and techniques and their performance according to performance metrics studied. An analysis and synthesis of these studies is conducted. Method: A systematic mapping study has been conducted for identifying and aggregating evidence about software fault prediction. Results: About 70 studies published from January 2002 to December 2014 were identified. Top 40 studies were selected for analysis, based on the quality criteria results. The main metrics used were: Halstead, McCabe and LOC (67.14%), Halstead, McCabe and LOC + Object-Oriented (15.71%), others (17.14%). The main models were: Machine Learning(ML) (47.14%), ML + Statistical Analysis (31.42%), others (21.41%). The data sets used were: private access (35%) and public access (65%). The most frequent combination of metrics, models and techniques were: Halstead, McCabe and LOC + Random Forest, Naive Bayes, Logistic Regression and Decision Tree representing the (60%) of the analyzed studies. Conclusions: This article has identified and classified the performance of the metrics, techniques and their combinations. This will help researchers to select datasets, metrics and models based on experimental results, with the objective to generate learning schemes that allow a better prediction software failures. Copyright © 2015 by the authors.";"Fault prediction models, Software metrics, Software quality"
"Engström E., Runeson P.";"Software product line testing - A systematic mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-78049529957&partnerID=40&md5=d0c91740e3fa70679e4560d266a06d48;"Context: Software product lines (SPL) are used in industry to achieve more efficient software development. However, the testing side of SPL is underdeveloped. Objective: This study aims at surveying existing research on SPL testing in order to identify useful approaches and needs for future research. Method: A systematic mapping study is launched to find as much literature as possible, and the 64 papers found are classified with respect to focus, research type and contribution type. Results: A majority of the papers are of proposal research types (64%). System testing is the largest group with respect to research focus (40%), followed by management (23%). Method contributions are in majority. Conclusions: More validation and evaluation research is needed to provide a better foundation for SPL testing. © 2010 Elsevier B.V. All rights reserved.";"Software product line testing, Systematic literature review, Systematic mapping, Testing"
"Ouhbi S., Idri A., Fernández-Alemán J.L., Toval A.";"Software quality requirements: A systematic mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84933501221&partnerID=40&md5=16c9a1d2da950000184c6347a78c4f83;"Software quality requirements (SQR) play a central role in software quality (SQ) success. The importance of mastering SQR can be seen as obvious, however, when it comes to customer satisfaction, end-users are often dissatisfied with SQ. In this paper, a systematic mapping study aims to summarize SQR research by answering nine mapping questions. In total, 51 articles were selected and classified according to multiple criteria: publication source, publication year, research type, research approach, contribution type of SQR literature, requirements engineering activity, well-known SQ model, software artifact and SQR type. The results show an increased interest in SQR research in recent years and reveal that conferences are the main SQR publication target. Most SQR research has used case studies. The dominant contribution type of SQR research is method while specification is the main requirements engineering activity identified. SQ models need to be more used for SQR identification. Design module and requirements documentation are the principal artifacts reported in SQR literature. External and internal SQR were the main SQR types addressed in literature. Identifying empirical solutions to address SQR is a promising research direction for researchers. © 2013 IEEE.";"Requirement engineering, Software quality requirements, Systematic mapping study"
"Garousi Yusifo?lu V., Amannejad Y., Betin Can A.";"Software test-code engineering: A systematic mapping";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84914181487&partnerID=40&md5=c284c62c41ba472eab9a053ccbd08710;"Context: As a result of automated software testing, large amounts of software test code (script) are usually developed by software teams. Automated test scripts provide many benefits, such as repeatable, predictable, and efficient test executions. However, just like any software development activity, development of test scripts is tedious and error prone. We refer, in this study, to all activities that should be conducted during the entire lifecycle of test-code as Software Test-Code Engineering (STCE). Objective: As the STCE research area has matured and the number of related studies has increased, it is important to systematically categorize the current state-of-the-art and to provide an overview of the trends in this field. Such summarized and categorized results provide many benefits to the broader community. For example, they are valuable resources for new researchers (e.g., PhD students) aiming to conduct additional secondary studies. Method: In this work, we systematically classify the body of knowledge related to STCE through a systematic mapping (SM) study. As part of this study, we pose a set of research questions, define selection and exclusion criteria, and systematically develop and refine a systematic map. Results: Our study pool includes a set of 60 studies published in the area of STCE between 1999 and 2012. Our mapping data is available through an online publicly-accessible repository. We derive the trends for various aspects of STCE. Among our results are the following: (1) There is an acceptable mix of papers with respect to different contribution facets in the field of STCE and the top two leading facets are tool (68%) and method (65%). The studies that presented new processes, however, had a low rate (3%), which denotes the need for more process-related studies in this area. (2) Results of investigation about research facet of studies and comparing our result to other SM studies shows that, similar to other fields in software engineering, STCE is moving towards more rigorous validation approaches. (3) A good mixture of STCE activities has been presented in the primary studies. Among them, the two leading activities are quality assessment and co-maintenance of test-code with production code. The highest growth rate for co-maintenance activities in recent years shows the importance and challenges involved in this activity. (4) There are two main categories of quality assessment activity: detection of test smells and oracle assertion adequacy. (5) JUnit is the leading test framework which has been used in about 50% of the studies. (6) There is a good mixture of SUT types used in the studies: academic experimental systems (or simple code examples), real open-source and commercial systems. (7) Among 41 tools that are proposed for STCE, less than half of the tools (45%) were available for download. It is good to have this percentile of tools to be available, although not perfect, since the availability of tools can lead to higher impact on research community and industry. Conclusion: We discuss the emerging trends in STCE, and discuss the implications for researchers and practitioners in this area. The results of our systematic mapping can help researchers to obtain an overview of existing STCE approaches and spot areas in the field that require more attention from the research community. © 2014 Elsevier B.V. All rights reserved.";"Development of test code, Quality assessment of test code, Software test-code engineering, Study repository, Survey, Systematic mapping"
"Santos A.R., De Oliveira R.P., De Almeida E.S.";"Strategies for consistency checking on software product lines: A mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961159520&partnerID=40&md5=27caea57da59de999eb3c9a77aee00ed;"Context. Software Product Lines (SPL) has become one of the most prominents way to promote the systematic reuse of software artifacts. Like any other piece of software, with the SPL aging, it becomes necessary to manage their evolution. However, in this process, engineers might introduce divergences among the SPL artifacts. Thus, a number of initiatives address the management of such inconsistencies. Objective. In this paper, we mapped the existing approaches to inconsistency management within SPL. Method. We used the systematic mapping study methodology. Results. We classified and performed a characterization of the approaches found, which we mangaged to arrange in three main categories. Most papers selected proposed new methods as solution research. Besides, there is still a need for validation and evaluation studies. Conclusion. We identified a lack of support for a number of activities of consistency assurance. For instance, no paper addressed the tracking of findings, decisions, and actions, as well as, few papers describing either the handling or a management policy for identified inconsistencies. Copyright 2015 ACM.";"Consistency checking, Literature review, Mapping study, Software product line engineering"
"Nik Daud N.M., Kadir W.M.N.W.";"Systematic mapping study of quality attributes measurement in service oriented architecture";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84866998707&partnerID=40&md5=a7fad9b2f2d879fe0b8d347d9936099b;"Background: Service oriented architecture (SOA) promotes software reuse and interoperability as its niche. Developer usually expects that services being used are performing as promised. Capability to measure quality of services helps developer to predict the software behavior. Measuring quality attributes of software can be treated as a way to ensure that the developed software will/does meet expected qualities. Objectives: This study investigates the state-of-art in quality attributes measurement for service oriented architecture. It will try to answer on type of studies that have been done regarding quality attributes measurement over service oriented architecture. Method: Systematic mapping study is selected as method for this study where primary studies related to quality attributes measurement are chosen and analyzed based on research questions. Result: Based on research questions, results of this mapping study shows, performance as highly seek quality attributes in this fields, where measurement technique that mostly used is metric and finally the measurement usually done on service level. Conclusion: this study is initiated to seek for how studies on quality attributes measurement in service oriented architecture has mature during these recent years. The result shows an up and down trends regarding number of studies whilst a lot of research gap can still be covered for future researches. © 2012 AICIT.";"Quality attributes measurement, service oriented architecture, systematic mapping study"
"Filho P.C., Brasilino C., Duarte A.";"Ten years of research on fault management in grid computing: A systematic mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84908011115&partnerID=40&md5=2721d0954867de0184a7751167f088e8;"BACKGROUND: There is a large body of literature on research about fault management in grid computing. Despite being a well-established research area, there are no systematic studies focusing on characterizing the sorts of research that have been conducted, identifying well-explored topics as well as opportunities for further research. OBJECTIVE: This study aims at surveying the existing research on fault management in grid computing in order to identify useful approaches and opportunities for future research. METHOD: We conducted a systematic mapping study to collect, classify and analyze the research literature on fault management in grid computing indexed by the main search engines in the field. RESULTS: Our study selected and classified 257 scientific papers and was able to answer five research questions regarding the distribution of the scientific production over the time and space. CONCLUSIONS: The majority of the selected studies focus on fault tolerance, with very few efforts towards fault prevention, prediction and removal. © 2013 IEEE.,";
"Hassan M.M., Shah S.M.A., Afzal W., Andler S.F., Lindström B., Blom M.";"Testability and software performance: A systematic mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84975789870&partnerID=40&md5=aa948ec1cf1aee77815cf56d0b933199;"In most of the research on software testability, functional correctness of the software has been the focus while the evidence regarding testability and non-functional properties such as performance is sporadic. The objective of this study is to present the current state-of-the-art related to issues of importance, types and domains of software under test, types of research, contribution types and design evaluation methods concerning testability and software performance. We find that observability, controllability and testing effort are the main testability issues while timeliness and response time (i.e., time constraints) are the main performance issues in focus. The primary studies in the area use diverse types of software under test within different domains, with realtime systems as being a dominant domain. The researchers have proposed many different methods in the area, however these methods lack implementation in practice. © 2016 ACM.";"Software performance, Systematic mapping study, Testability"
"Ozakinci R., Tarhan A.";"The role of process in early software defect prediction: Methods, attributes and metrics";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84994005243&partnerID=40&md5=aa6f7438c816fe1687d04b9c387b2b7d;"Software quality is the set of inherent characteristics that are built into a software product throughout software development process. An important indicator of software quality is the trend of software defects in the life-cycle. The models of software defect prediction and software reliability provide the opportunity for practitioners to observe the defectiveness distribution of their products in development and operation. However, reported studies are mostly focused on coding or testing stages. Though this is reasonable due to executable nature of the product, it prevents practitioners from taking the advantages (such as cost reduction) of identifying and predicting software defects earlier in the life-cycle. This paper, therefore, provides an overview of the trend of early software defect prediction studies as retrieved by a systematic mapping of the literature, and elaborates on the methods, attributes, and metrics of the studies that comprise software process data in the defect prediction. © Springer International Publishing Switzerland 2016.";"Defect prediction, Early, Prediction model, Process metrics, Software defect, Software quality, Software reliability, Systematic mapping"
"Burns C., Ferreira J., Hellmann T.D., Maurer F.";"Usable results from the field of API usability: A systematic mapping and further analysis";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870895497&partnerID=40&md5=f9dac6e9ebcbd3d7c1d02844ae3aee4a;"Modern software development often involves the use of complex, reusable components called Application Programming Interfaces (APIs). Developers use APIs to complete tasks they could not otherwise accomplish in a reasonable time. These components are now vital to mainstream software development. But as APIs have become more important, understanding how to make them more usable is becoming a significant research question. To assess the current state of research in the field, we conducted a systematic mapping. A total of 28 papers were reviewed and categorized based on their research type and on the evaluation method employed by its authors. We extended the analysis of a subset of the papers we reviewed beyond the usual limits of a systematic map in order to more closely examine details of their evaluations - such as their structure and validity - and to summarize their recommendations. Based on these results, common problems in the field are discussed and future research directions are suggested. © 2012 IEEE.";"API usability, application programming interface, meta-analysis, systematic map, systematic review"
"Seriai A., Benomar O., Cerat B., Sahraoui H.";"Validation of software visualization tools: A systematic mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84920660808&partnerID=40&md5=797cc12a015ec2d7ef9d22b3103e0bb5;"Software visualization as a research field focuses on the visualization of the structure, behavior, and evolution of software. It studies techniques and methods for graphically representing these different aspects of software. Interest in software visualization has grown in recent years, producing rapid advances in the diversity of research and in the scope of proposed techniques, and aiding the application experts who use these techniques to advance their own research. Despite the importance of evaluating software visualization research, there is little work studying validation methods. As a consequence, it is usually difficult producing compelling evidence about the effectiveness of software visualization contributions. The goal of this paper is to study the validation techniques performed in the software visualization literature. We conducted a systematic mapping study of validation methods in software visualization. We consider 752 articles from multiple sources, published between 2000 and 2012, and study the validation techniques of the software visualization articles. The main outcome of this study is the lack in rigor when validating software visualization tool and techniques. Although software visualization has grown in interest in the last decade, it still lacks the necessary maturity to be properly and thoroughly evaluating its claims. Most article evaluations studied in this paper are qualitative case studies, including discussions about the benefits of the proposed visualizations. The results help understand the needs in software visualization validation techniques. They identify the type of evaluations that should be performed to address this deficiency. The specific analysis of SOFTVIS series articles shows that the specialized conference suffers from the same shortage. © 2014 IEEE.";"Software visualization, Systematic mapping study, Validation techniques"
"Flemstrom D., Sundmark D., Afzal W.";"Vertical Test Reuse for Embedded Systems: A Systematic Mapping Study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84958235305&partnerID=40&md5=16444cc014261bf229bc5003e5f50f50;"Vertical test reuse refers to the reuse of test cases or other test artifacts over different integration levels in the software or system engineering process. Vertical test reuse has previously been proposed for reducing test effort and improving test effectiveness, particularly for embedded system development. The goal of this study is to provide an overview of the state of the art in the field of vertical test reuse for embedded system development. For this purpose, a systematic mapping study has been performed, identifying 11 papers on vertical test reuse for embedded systems. The primary result from the mapping is a classification of published work on vertical test reuse in the embedded system domain, covering motivations for reuse, reuse techniques, test levels and reusable test artifacts considered, and to what extent the effects of reuse have been evaluated. © 2015 IEEE.";"embedded system, systematic mapping study, vertical test reuse"
"Granda M.F., Condori-Fernandez N., Vos T.E.J., Pastor O.";"What do we know about the defect types detected in conceptual models?";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84937942055&partnerID=40&md5=f5d60b4ef9d480f4806a8bad04269abe;"In Model-Driven Development (MDD), defects are managed at the level of conceptual models because the other artefacts are generated from them, such as more refined models, test cases and code. Although some studies have reported on defect types at model level, there still does not exist a clear and complete overview of the defect types that occur at the abstraction level. This paper presents a systematic mapping study to identify the model defect types reported in the literature and determine how they have been detected. Among the 282 articles published in software engineering area, 28 articles were selected for analysis. A total of 226 defects were identified, classified and their results analysed. For this, an appropriate defect classification scheme was built based on appropriate dimensions for models in an MDD context. © 2015 IEEE.";"Conceptual Schema Defects, Defect Classification Scheme, Model-Driven Development, Systematic Mapping Study"
"Garousi V., Mäntylä M.V.";"When and what to automate in software testing? A multi-vocal literature review";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84969529104&partnerID=40&md5=b1a7b786fb5bbbec9737993a11f4e652;"Context Many organizations see software test automation as a solution to decrease testing costs and to reduce cycle time in software development. However, establishment of automated testing may fail if test automation is not applied in the right time, right context and with the appropriate approach. Objective The decisions on when and what to automate is important since wrong decisions can lead to disappointments and major wrong expenditures (resources and efforts). To support decision making on when and what to automate, researchers and practitioners have proposed various guidelines, heuristics and factors since the early days of test automation technologies. As the number of such sources has increased, it is important to systematically categorize the current state-of-The-art and -practice, and to provide a synthesized overview. Method To achieve the above objective, we have performed a Multivocal Literature Review (MLR) study on when and what to automate in software testing. A MLR is a form of a Systematic Literature Review (SLR) which includes the grey literature (e.g., blog posts and white papers) in addition to the published (formal) literature (e.g., journal and conference papers). We searched the academic literature using the Google Scholar and the grey literature using the regular Google search engine. Results Our MLR and its results are based on 78 sources, 52 of which were grey literature and 26 were formally published sources. We used the qualitative analysis (coding) to classify the factors affecting the when- And what-to-automate questions to five groups: (1) Software Under Test (SUT)-related factors, (2) test-related factors, (3) test-tool-related factors, (4) human and organizational factors, and (5) cross-cutting and other factors. The most frequent individual factors were: need for regression testing (44 sources), economic factors (43), and maturity of SUT (39). Conclusion We show that current decision-support in software test automation provides reasonable advice for industry, and as a practical outcome of this research we have summarized it as a checklist that can be used by practitioners. However, we recommend developing systematic empirically-validated decision-support approaches as the existing advice is often unsystematic and based on weak empirical evidence. © 2016 Elsevier B.V.";"Decision support, Multivocal literature review, Software test automation, Systematic literature review, Systematic Mapping study, What to automate, When to automate"
"Paiva S.L.D.C., Simao A.D.S.";"A Systematic Mapping Study on Test Generation from Input/Output Transition Systems";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84958235921&partnerID=40&md5=4a11222530cf3542f8047a0b76a39271;"Context: The construction of complex systems has increased the adoption of technologies that aim at automating the testing activity. Model-Based Testing (MBT) has emerged as an approach to automate the generation of high-quality test suites from behavioural models. Input/Output Transition Systems(IOTSs) have been used in MBT because they are more expressive than other formalisms. Objective: This paper focuses on methods for test generation from IOTSs, aiming at synthesizing available knowledge and identifying gaps in the existing approaches. Method: A systematic mapping was conducted, in which 84 studies were evaluated and categorized in the taxonomy of MBT approaches. Results: The results indicate most of the reported approaches apply non-deterministic algorithms to test generation which do not employ measures of coverage or quality. This scenario underscores the importance of further research into this topic. Conclusion: The evidences indicate that the generation of complete test suites is guaranteed in theory without satisfying a certain test selection criterion. This result points out the need of additional investigation in this topic. © 2015 IEEE.";"Input/Output Transition Systems, systematic mapping study, test generation"
"Abdellatief M., Sultan A.B.M., Ghani A.A.A., Jabar M.A.";"A mapping study to investigate component-based software system metrics";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84872676227&partnerID=40&md5=168cb6d0d2c29588e6a74450ccc234fc;"A component-based software system (CBSS) is a software system that is developed by integrating components that have been deployed independently. In the last few years, many researchers have proposed metrics to evaluate CBSS attributes. However, the practical use of these metrics can be difficult. For example, some of the metrics have concepts that either overlap or are not well defined, which could hinder their implementation. The aim of this study is to understand, classify and analyze existing research in component-based metrics, focusing on approaches and elements that are used to evaluate the quality of CBSS and its components from a component consumer's point of view. This paper presents a systematic mapping study of several metrics that were proposed to measure the quality of CBSS and its components. We found 17 proposals that could be applied to evaluate CBSSs, while 14 proposals could be applied to evaluate individual components in isolation. Various elements of the software components that were measured are reviewed and discussed. Only a few of the proposed metrics are soundly defined. The quality assessment of the primary studies detected many limitations and suggested guidelines for possibilities for improving and increasing the acceptance of metrics. However, it remains a challenge to characterize and evaluate a CBSS and its components quantitatively. For this reason, much effort must be made to achieve a better evaluation approach in the future. © 2012 Elsevier Inc.";"Component-based software system, Software components, Software metrics, Software quality, Systematic mapping study"
"Sulaman S.M., Weyns K., Höst M.";"A review of research on risk analysis methods for IT systems";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84877289265&partnerID=40&md5=e1f98654dd2286cf5fd9e00497f14c7b;"Context: At the same time as our dependence on IT systems increases, the number of reports of problems caused by failures of critical IT systems has also increased. This means that there is a need for risk analysis in the development of this kind of systems. Risk analysis of technical systems has a long history in mechanical and electrical engineering. Objective: Even if a number of methods for risk analysis of technical systems exist, the failure behavior of information systems is typically very different from mechanical systems. Therefore, risk analysis of IT systems requires different risk analysis techniques, or at least adaptations of traditional approaches. This means that there is a need to understand what types of methods are available for IT systems and what research that has been conducted on these methods. Method: In this paper we present a systematic mapping study on risk analysis for IT systems. 1086 unique papers were identified in a database search and 57 papers were identified as relevant for this study. These papers were classified based on 5 different criteria. Results: This classification, for example, shows that most of the discussed risk analysis methods are qualitative and not quantitative and that most of the risk analysis methods that are presented in these papers are developed for IT systems in general and not for specific types of IT system. Conclusions: The results show that many new risk analysis methods have been proposed in the last decade but even more that there is a need for more empirical evaluations of the different risk analysis methods. Many papers were identified that propose new risk analysis methods, but few papers discuss a systematic evaluation of these methods or a comparison of different methods based on empirical data. Copyright 2013 ACM.";"IT systems, Mapping study, Risk analysis"
"Zein S., Salleh N., Grundy J.";"A systematic mapping study of mobile application testing techniques";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84963641809&partnerID=40&md5=76dba7bb0f8605cbc0fd95a05873dca4;"The importance of mobile application specific testing techniques and methods has been attracting much attention of software engineers over the past few years. This is due to the fact that mobile applications are different than traditional web and desktop applications, and more and more they are moving to being used in critical domains. Mobile applications require a different approach to application quality and dependability and require an effective testing approach to build high quality and more reliable software. We performed a systematic mapping study to categorize and to structure the research evidence that has been published in the area of mobile application testing techniques and challenges that they have reported. Seventy nine (79) empirical studies are mapped to a classification schema. Several research gaps are identified and specific key testing issues for practitioners are identified: there is a need for eliciting testing requirements early during development process, the need to conduct research in real-world development environments, specific testing techniques targeting application life-cycle conformance and mobile services testing, and comparative studies for security and usability testing. © 2016 Elsevier Inc. All rights reserved.";"Mobile application testing, Software testing, Systematic mapping"
"Garousi V., Mesbah A., Betin-Can A., Mirshokraie S.";"A systematic mapping study of web application testing";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84878316262&partnerID=40&md5=efb3d8db2cdcf51f20930ef18222929d;"Context: The Web has had a significant impact on all aspects of our society. As our society relies more and more on the Web, the dependability of web applications has become increasingly important. To make these applications more dependable, for the past decade researchers have proposed various techniques for testing web-based software applications. Our literature search for related studies retrieved 147 papers in the area of web application testing, which have appeared between 2000 and 2011. Objective As this research area matures and the number of related papers increases, it is important to systematically identify, analyze, and classify the publications and provide an overview of the trends in this specialized field. Method We review and structure the body of knowledge related to web application testing through a systematic mapping (SM) study. As part of this study, we pose two sets of research questions, define selection and exclusion criteria, and systematically develop and refine a classification schema. In addition, we conduct a bibliometrics analysis of the papers included in our study. Results Our study includes a set of 79 papers (from the 147 retrieved papers) published in the area of web application testing between 2000 and 2011. We present the results of our systematic mapping study. Our mapping data is available through a publicly-accessible repository. We derive the observed trends, for instance, in terms of types of papers, sources of information to derive test cases, and types of evaluations used in papers. We also report the demographics and bibliometrics trends in this domain, including top-cited papers, active countries and researchers, and top venues in this research area. Conclusion We discuss the emerging trends in web application testing, and discuss the implications for researchers and practitioners in this area. The results of our systematic mapping can help researchers to obtain an overview of existing web application testing approaches and indentify areas in the field that require more attention from the research community. © 2013 Elsevier B.V. All rights reserved.";"Bibliometrics, Paper repository, Systematic mapping, Testing, Web application"
"Neto C.B.L., Filho P.B.D.C., Duarte A.N.";"A systematic mapping study on fault management in cloud computing";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84908005906&partnerID=40&md5=4d276f88513f45493729ad18a23aebee;"Background: The large computational infrastructures required to provide the on-demand services that most users are now used to are more prone to failures than any single computational device. Thus, fault management is a essential activity in the realization of the cloud computing model. Aims: This work aims at identifying well-explored topics on fault management in cloud computing as well as pin-pointing gaps in the scientific literature that may represent opportunities for further research and development in this area. Method: We conducted a systematic mapping study to collect, filter and classify scientific works in this area. The 4535 scientific papers found on major search engines were filtered and the remaining 166 papers were classified according to a taxonomy described in this work. Results: We found that IaaS is most explored in the selected studies. The main dependability functions explored were Tolerance and Removal, and the attributes were Reliability and Availability. Most papers had been classified by research type as Solution Proposal. Conclusion: This work summarizes and classifies the research effort conducted on fault management in cloud computing, providing a good starting point for further research in this area. © 2013 IEEE.";"Cloud Computing, Dependability, Evidence-Based Research, Fault Management, Mapping Study, Secondary Study"
"De Vargas Agilar E., De Almeida R.B., Canedo E.D.";"A systematic mapping study on legacy system modernization";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84988349883&partnerID=40&md5=451bac271599396ea4902529ffac10fa;"Legacy system modernization has gained increasing attention from both researchers and practitioners, mainly due to the need of maintaining legacy systems towards business needs and technology advances. In this way, a set of techniques, tools and terms related to software modernization have been proposed- although they have not been consolidated yet. This hinders the characterization of real modernization scenarios according to the existing literature. This paper synthesize the existing contributions related to software modernization by means of a mapping study that characterizes the main results in terms of proposed processes, techniques, and tools. As one of our main findings, we report a lack of empirical studies trying to understand the benefits of using the existing approaches for software modernization.";"Legacy systems, Mapping studies in software engineering, Software modernization"
"González J.E., Juristo N., Vegas S.";"A systematic mapping study on testing technique experiments: Has the situation changed since 2000?";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84907807087&partnerID=40&md5=00c82980bdc011d47bb2182dc9e3a806;"Context Juristo et al. [7] published a literature review about testing technique expenments. The goal was to provide a picture of which techniques and aspects of techniques had been studied experimentally, and try to compile a body of knowledge on testing techniques. Goal: In this paper, we extend Junsto et al.'s study to cover the years from 2000 (where it ended) until 2013. Method: We have performed a systematic mapping study. Results: The situation in testing experimentation has not changed since Junsto et al.'s study. Conclusions: The research field has the same shortcomings. © 2014 ACM.";"mapping study, software testing techniques, testing experiments"
"Elberzhager F., Münch J., Nha V.T.N.";"A systematic mapping study on the combination of static and dynamic quality assurance techniques";https://www.scopus.com/inward/record.uri?eid=2-s2.0-80055068778&partnerID=40&md5=79090e7196d4dd5edae0bed3976791e4;"Context: A lot of different quality assurance techniques exist to ensure high quality products. However, most often they are applied in isolation. A systematic combination of different static and dynamic quality assurance techniques promises to exploit synergy effects, such as higher defect detection rates or reduced quality assurance costs. However, a systematic overview of such combinations and reported evidence about achieving synergy effects with such kinds of combinations is missing. Objective: The main goal of this article is the classification and thematic analysis of existing approaches that combine different static and dynamic quality assurance technique, including reported effects, characteristics, and constraints. The result is an overview of existing approaches and a suitable basis for identifying future research directions. Method: A systematic mapping study was performed by two researchers, focusing on four databases with an initial result set of 2498 articles, covering articles published between 1985 and 2010. Results: In total, 51 articles were selected and classified according to multiple criteria. The two main dimensions of a combination are integration (i.e., the output of one quality assurance technique is used for the second one) and compilation (i.e., different quality assurance techniques are applied to ensure a common goal, but in isolation). The combination of static and dynamic analyses is one of the most common approaches and usually conducted in an integrated manner. With respect to the combination of inspection and testing techniques, this is done more often in a compiled way than in an integrated way. Conclusion: The results show an increased interest in this topic in recent years, especially with respect to the integration of static and dynamic analyses. Inspection and testing techniques are currently mostly performed in an isolated manner. The integration of inspection and testing techniques is a promising research direction for the exploitation of additional synergy effects. © 2011 Elsevier B.V. All rights reserved.";"Combination, Dynamic quality assurance, Inspection, Static quality assurance, Systematic mapping study, Testing"
"Hellmann T.D., Sharma A., Ferreira J., Maurer F.";"Agile testing: Past, present, and future - Charting a systematic map of testing in agile software development";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84868294056&partnerID=40&md5=07cb548e86ce68641af0917124a13d80;"Testing has been a cornerstone of agile software development methodologies since early in the history of the field. However, the terminology used to describe the field - as well as the evidence in existing literature - is largely inconsistent. In order to better structure our understanding of the field and to guide future work, we conducted a systematic mapping of agile testing. We investigated five research questions: which authors are most active in agile testing, what is agile testing used for, what types of paper tend to be published in this field, how do practitioners and academics contribute to research in this field, and what tools are used to conduct agile testing? Of particular interest is our investigation into the source of these publications, which indicates that academics and practitioners focus on different types of publication and, disturbingly, that the number of practitioner papers in the sources we searched is strongly down since 2010. © 2012 IEEE.";"agile software development, empirical, software testing, systematic mapping, test-driven development, testing tools"
"Do Carmo Machado I., Da Mota Silveira Neto P.A., De Almeida E.S., De Lemos Meira S.R.";"RiPLE-TE: A process for testing Software Product Lines";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84855554904&partnerID=40&md5=e8613b35f4a36d18abc967fb4a53af68;"Software Product Lines Testing has received special attention in recent years, due to its crucial role in quality and also due to the high cost this activity poses. In this effect, to make testing a feasible activity, some improvements are required. This paper presents a process for testing product lines, designed based on the gaps identified by a systematic mapping study, performed in order to understand the current scenario in this research field. An experimental study was performed in order to evaluate the proposed process in terms of understanding the role of a structured testing process in a SPL project.";"Software process, Software product lines, Software reuse, Software testing"
"Mohi-Aldeen S.M., Deris S., Mohamad R.";"Systematic mapping study in automatic test case generation";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84948782811&partnerID=40&md5=ce17b999150fefd2e67fae653350f6ca;"Test case generation is a painstaking task in software testing and has a strong influence on the efficiency and the effectiveness of software tests. It is an important subject in software testing research that has led to the development of several tools and approaches over the decades. This paper presented a systematic mapping study to get an overview about the current studies of distinct techniques for generation of test cases automatically. The techniques presented in this paper are random-based methods, search-based methods and data mining-based methods. Each technique is explored briefly to give the basic idea behind it. In general, the paper's objective is to give an up-to-date introduction and short review of the research in generation of test cases automatically. Systematic mapping study is the process of finding and collecting as much literature as possible, provides a structure of the type of research reports and the results that have been published by categorizing them depending on specific search questions to provide a background for further research. This study was based on a comprehensive set of 85 papers published in conference and journals between 2002 and 2013 obtained after using multistage selection criteria in the field of automatic test cases generation. The results from our systematic mapping study include information about the researches techniques used to generate test cases automatically and types of coverage within a specific period that can help researchers in this field through providing an overview of the current researches in this area. Furthermore, it may serve as a first step towards a great explanation of the topic with the help of systematic literature review. © 2014 The authors and IOS Press. All rights reserved.";"Automatic test case generation methods, Software testing, Test case generation, Test case generation methods"
"Batot E., Sahraoui H., Syriani E., Molins P., Sboui W.";"Systematic mapping study of model transformations for concrete problems";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84969921820&partnerID=40&md5=3845b641095db79942e3712d847bb345;"As a contribution to the adoption of the Model-Driven Engineering (MDE) paradigm, the research community has proposed concrete model transformation solutions for the MDE infrastructure and for domain-specific problems. However, as the adoption increases and with the advent of the new initiatives for the creation of repositories, it is legitimate to question whether proposals for concrete transformation problems can be still considered as research contributions or if they respond to a practical/technical work. In this paper, we report on a systematic mapping study that aims at understanding the trends and characteristics of concrete model transformations published in the past decade. Our study shows that the number of papers with, as main contribution, a concrete transformation solution, is not as high as expected. This number increased to reach a peak in 2010 and is decreasing since then. Our results also include a characterization and an analysis of the published proposals following a rigorous classification scheme. © Copyright 2016 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.";"Model Transformation, Software Engineering, Systematic Mapping"
"Catal C., Mishra D.";"Test case prioritization: A systematic mapping study";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880587969&partnerID=40&md5=442d06af0d109613e52157d932d6d107;"Test case prioritization techniques, which are used to improve the cost-effectiveness of regression testing, order test cases in such a way that those cases that are expected to outperform others in detecting software faults are run earlier in the testing phase. The objective of this study is to examine what kind of techniques have been widely used in papers on this subject, determine which aspects of test case prioritization have been studied, provide a basis for the improvement of test case prioritization research, and evaluate the current trends of this research area. We searched for papers in the following five electronic databases: IEEE Explorer, ACM Digital Library, Science Direct, Springer, and Wiley. Initially, the search string retrieved 202 studies, but upon further examination of titles and abstracts, 120 papers were identified as related to test case prioritization. There exists a large variety of prioritization techniques in the literature, with coverage-based prioritization techniques (i.e., prioritization in terms of the number of statements, basic blocks, or methods test cases cover) dominating the field. The proportion of papers on model-based techniques is on the rise, yet the growth rate is still slow. The proportion of papers that use datasets from industrial projects is found to be 64 %, while those that utilize public datasets for validation are only 38 %. On the basis of this study, the following recommendations are provided for researchers: (1) Give preference to public datasets rather than proprietary datasets, (2) develop more model-based prioritization methods, (3) conduct more studies on the comparison of prioritization methods, (4) always evaluate the effectiveness of the proposed technique with well-known evaluation metrics and compare the performance with the existing methods, (5) publish surveys and systematic review papers on test case prioritization, and (6) use datasets from industrial projects that represent real industrial problems. © 2012 Springer Science+Business Media, LLC.";"Regression testing, Systematic literature review, Systematic mapping study, Test case prioritization"
"Do?an S., Betin-Can A., Garousi V.";"Web application testing: A systematic literature review";https://www.scopus.com/inward/record.uri?eid=2-s2.0-84900597825&partnerID=40&md5=29b2691a945894ddceca3e7f69123b48;"Context The web has had a significant impact on all aspects of our society. As our society relies more and more on the web, the dependability of web applications has become increasingly important. To make these applications more dependable, for the past decade researchers have proposed various techniques for testing web-based software applications. Our literature search for related studies retrieved 193 papers in the area of web application testing, which have appeared between 2000 and 2013. Objective As this research area matures and the number of related papers increases, it is important to systematically identify, analyze, and classify the publications and provide an overview of the trends and empirical evidence in this specialized field. Methods We systematically review the body of knowledge related to functional testing of web application through a systematic literature review (SLR) study. This SLR is a follow-up and complimentary study to a recent systematic mapping (SM) study that we conducted in this area. As part of this study, we pose three sets of research questions, define selection and exclusion criteria, and synthesize the empirical evidence in this area. Results Our pool of studies includes a set of 95 papers (from the 193 retrieved papers) published in the area of web application testing between 2000 and 2013. The data extracted during our SLR study is available through a publicly-accessible online repository. Among our results are the followings: (1) the list of test tools in this area and their capabilities, (2) the types of test models and fault models proposed in this domain, (3) the way the empirical studies in this area have been designed and reported, and (4) the state of empirical evidence and industrial relevance. Conclusion We discuss the emerging trends in web application testing, and discuss the implications for researchers and practitioners in this area. The results of our SLR can help researchers to obtain an overview of existing web application testing approaches, fault models, tools, metrics and empirical evidence, and subsequently identify areas in the field that require more attention from the research community. © 2014 Elsevier Inc.";"Systematic literature review, Testing, Web application"
"Durelli V.H.S., Araujo R.F., Silva M.A.G., Oliveira R.A.P., Maldonado J.C., Delamaro M.E.";"What a long, strange trip it's been: Past, present, and future perspectives on software testing research";https://www.scopus.com/inward/record.uri?eid=2-s2.0-82255172046&partnerID=40&md5=cd89afa234a6f03b9cae5e3e617ab60d;"Over the past 25 years the Brazilian Symposium on Software Engineering (SBES) has evolved to become the most important event on software engineering in Brazil. Throughout these years, SBES has gathered a large body of studies in software testing. Aimed at providing an insightful understanding of what has already been published in such event, we synthesized its rich 25-year history of research on software testing. Using information drawn from this overview we attempted to highlight which types of study have been the most applied for conveying software testing efforts. We also devised a co-authorship network to obtain a bird's-eye view of which research groups and scholars have been the most prolific ones. Moreover, by performing a citation analysis of the selected studies we set out to ascertain the importance of SBES in a wider scenario. Finally, borne out by the information extracted from the studies, we shed some light on the state-of-the-art of software testing in Brazil and provide an outlook on its foreseeable future. © 2011 IEEE.";"Software Testing, systematic mapping"
