ID;Authors;Title;Year;Link;Authors with affiliations;Abstract;Author Keywords;Index Keywords;DOI;Type transfo;Commentaire Type;MM Type;Commentaire MM Type;Objectif;Commentaire Ojectif;Langage de transformation;Commentaire langage;Données;Commentaire données;Validation;Commentaire validation;Portée;Commentaire portée;Orientation;Commentaire  orientation
1;Taghizadeh F., Taghizadeh S.R.;A graph transformation-based approach for applying MDA to SOA;2009;http://www.scopus.com/inward/record.url?eid=2-s2.0-77949810823&partnerID=40&md5=bd3a7e885e4be05ab4e2a8ba4dc0b8c8;"Taghizadeh, F., Department of Physics, College of Sciences, Yasouj University, 75314, Yasouj, Iran; Taghizadeh, S.R., College of Engineering, Islamic Azad University of Gachsaran, Gachsaran, Iran";Although Model Driven Architecture has taken successful steps toward model-based software development, this approach still faces complex situations and ambiguous questions while applying to real world software systems. One of these questions - which has taken the most interest and focus - is how model transforms between different abstraction levels, MDA proposes. In this paper, we propose an approach based on Story Driven Modeling and Aspect Oriented Programming to ease these transformations. Service Oriented Architecture is taken as the target model to test the proposed mechanism in a functional system. _ 2009 IEEE.;"Aspects and Jini; MDA; Middleware transparency; Model transformation; SDM; SOA";"Abstraction level; Aspect-Oriented Programming; Aspects and Jini; Functional systems; Graph Transformation; Model driven architectures; Model transformation; Model transforms; Model-based; Software development; Software systems; Story driven modeling; Target model; Computer science; Computer systems programming; Information services; Middleware; Software architecture; Space division multiple access; Transparency; Service oriented architecture (SOA)";10.1109/FCST.2009.129;Structurelle;Transfo sur les SOA;input general / output general;UML -> XMI -> SOA (->Code);Language Translation;Utiliser les story modeling and aspect oriented pour faciliter le passage du PIM au PSM au code.;Langage dédié (QVT…);"Utilisation de nombreux langages avec comme pivot XMI : du PIM au PSM, un type de MoTMoT et ensuite un ""AndroMDA"". Le weaving des aspects en Xdoclet et la generation de code en Jini (un outsider des JEE et .NET) ";Jouets;Aucune vraiment;No validation;;Exo/Out-place;Mixte, la transformation est une composition de transformations : on descend en abstraction 2 fois : UML->SOA->code;Académie;
2;Dos Santos Soares M., Vrancken J.;A metamodeling approach to transform uml 2.0 sequence diagrams to petri nets;2008;http://www.scopus.com/inward/record.url?eid=2-s2.0-62849114190&partnerID=40&md5=8326193c3aec58beb72a0659f9274efc;"Dos Santos Soares, M., Delft University of Technology, Delft, Netherlands; Vrancken, J., Delft University of Technology, Delft, Netherlands";The paper presents transformations from UML 2.0 Sequence Diagrams to Time Petri nets with inhibitor arcs. The transformation is not restricted to messages calls and responses, hit also to some of the new Sequence Diagrams operators. This model-to-model transformation is based on metamodels and is tiseful to improve semantics, as Petri nets can be executed by simtilation and formally proved. The advantages of this mtilti-formalism approach are that different views are represented, complex systems development is done based on several levels of detail, and complexity is managed with abstraction and modtilarization.;"Formal Methods; Model Driven Engineering; Model Transformations; Petri nets; Sequence Diagrams";"Complex systems; Inhibitor arcs; Levels of details; Meta-modeling; Meta-models; Model Driven Engineering; Model Transformations; Model-to-model transformations; Sequence Diagrams; Time petri nets; UML 2.0; Graph theory; Graphic methods; Information theory; Marine biology; Petri nets; Spontaneous emission; Formal methods";;Structurelle;;input general / output general;UML Sequence -> PetriNet;Language Translation;From SequenceDiagram to PetriNet;Langage classique (Java…);Eclipse development platform;Jouets;;No validation;Les auteurs décrivent comment leur méthode peut et sera validée, mais ne font rien en ce sens.;Exo/Out-place;;Académie;Une étude qui se veut détachée du type de système
3;Saleh E., Kamel A., Fahmy A.;A model driven engineering design approach for developing multi-platform user interfaces;2010;http://www.scopus.com/inward/record.url?eid=2-s2.0-77954736681&partnerID=40&md5=74244f76e8f605edde6c0a0367af1e4f;"Saleh, E., Department of Computer Science, University of Cairo, Egypt; Kamel, A., Department of Computer Science, University of Cairo, Egypt; Fahmy, A., Department of Computer Science, University of Cairo, Egypt";"The wide variety of interactive devices and modalities an interactive system must support has created a big challenge in designing a multi-platform user interface and poses a number of issues for the design cycle of interactive systems. Model-Based User Interface Design (MBUID) approaches can provide a useful support in addressing this problem. In MBUID the user interface is described using various models; each describes a different facet of the user interface. Our methodology is based on task models that are attributed to derive a dialog model, from which different concrete models with different appearances can be generated. This paper presents a semi-automatic Model-Based transformational methodology for multi-platform user interface (MPUI) design. The proposed methodology puts dialog modeling in the center of the design process. A core model is integrated in the design process namely our Dialog-States Model (DSM); which represents our initial step to adapting to multiple target platforms by assigning multiple Dialog- State models to the same task model. A multi-step reification process will be taken from abstract models to more concrete models until reaching a final user interface customized according to the target platform.";"ConcurTaskTrees; Dialog model; Model-based user interface design; StateCharts; UsiXML";"Abstract models; Concrete model; Core model; Design cycle; Design process; Dialog modeling; Dialog models; Interactive system; Model-based user interface design; Model-driven Engineering; Multi-platform user interfaces; Multi-step; Multiple targets; Semi-automatics; State models; Statecharts; States model; Task models; Design; User interfaces";;Structurelle;;input general / output general;"""DialogStateModel"" Combiné IdealXML";Refinement;Multi-platform user interface;Langage classique (Java…);UsiXML  et framework;Jouets;"Des exemples succins d'application, aucunes ""données"" tel qu'on a l'habitude de l'entendre des illustrations tout au plus.";No validation;Des petits exemples viennent montrer que, dans l'idée, ca fonctionne. Rien de plus.;Exo/Out-place;"Semantique en entrée, utilité de l'interface ; décorée en sortie, utilisabilité de l'interface -> différent selon la platforme cible";Académie;On montre les applications dans un langage propre à l'industrie, orienté utilisation, productivité.
4;Urbas, L., Doherr, F.;autoHMI: a model driven software engineering approach for HMIs in process industries;2011;http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5952755;Inst. of Autom., Dresden Univ. of Technol., Dresden, Germany;In process industries the Human Machine Interfaces (HMI) for the Supervisory Control Systems are built at the very end of the planning phase because of the many interdependencies of engineering data. These HMIs consist of a hierarchy of graphical displays that illustrate the chemical process and its automation system. Today, these displays are derived manually from the plant's piping and instrumentation diagrams (P&ID) and other sources. We present a model driven software engineering solution to automatically generate the HMI directly from engineering data. At the core of the algorithm there are two models - a concept and task model describing the process and its structure, and an abstract HMI-model describing the interaction space. This article describes the design and structure of these models as well as the chain of transformations that are necessary to generate supervisory control HMIs for the process industries. A case study shows the scope and limitations of this approach.;;;;Structurelle;;input general / output specific;abstract CAE to final code (specific);Refinement;;Langage dédié (QVT…);Cameleon framework;Open source;"""autoHMI was applied to several test cases of different sizes.";Validation empirique;Case study;Exo/Out-place;;Académie;
6;Wimmer M.;A semi-automatic approach for bridging DSMLs with UML;2009;http://www.scopus.com/inward/record.url?eid=2-s2.0-84886390835&partnerID=40&md5=a3ca4ddca108092ed29f4b929028ed54;Wimmer, M., Business Informatics Group, Vienna University of Technology, Vienna, Austria;Purpose - The definition of modeling languages is a key-prerequisite for model-driven engineering. In this respect, Domain-Specific Modeling Languages (DSMLs) defined from scratch in terms of metamodels and the extension of Unified Modeling Language (UML) by profiles are the proposed options. For interoperability reasons, however, the need arises to bridge modeling languages originally defined as DSMLs to UML. Therefore, the paper aims to propose a semi-automatic approach for bridging DSMLs and UML by employing model-driven techniques. Design/methodology/approach - The paper discusses problems of the ad hoc integration of DSMLs and UML and from this discussion a systematic and semi-automatic integration approach consisting of two phases is derived. In the first phase, the correspondences between the modeling concepts of the DSML and UML are defined manually. In the second phase, these correspondences are used for automatically producing UML profiles to represent the domain-specific modeling concepts in UML and model transformations for transforming DSML models to UML models and vice versa. The paper presents the ideas within a case study for bridging ComputerAssociate's DSML of the AllFusion Gen CASE tool with IBM's Rational Software Modeler for UML. Findings - The ad hoc definition of UML profiles and model transformations for achieving interoperability is typically a tedious and error-prone task. By employing a semi-automatic approach one gains several advantages. First, the integrator only has to deal with the correspondences between the DSML and UML on a conceptual level. Second, all repetitive integration tasks are automated by using model transformations. Third, well-defined guidelines support the systematic and comprehensible integration. Research limitations/implications - The paper focuses on the integrating direction DSMLs to UML, but not on how to derive a DSML defined in terms of a metamodel from a UML profile. Originality/value - Although, DSMLs defined as metamodels and UML profiles are frequently applied in practice, only few attempts have been made to provide interoperability between these two worlds. The contribution of this paper is to integrate the so far competing worlds of DSMLs and UML by proposing a semi-automatic approach, which allows exchanging models between these two worlds without loss of information. _ Emerald Group Publishing Limited.;"Information modelling; Open systems; Software tools";"Design/methodology/approach; Domain specific modeling; Domain-specific modeling language; Information modelling; Integration approach; Model transformation; Model-driven Engineering; Model-driven techniques; Automation; Computer aided software engineering; Integration; Interoperability; Markup languages; Mathematical models; Open systems; Software design; Unified Modeling Language";10.1108/17440080910983592;Structurelle;Transformation de DSL (domain specific language) en UML;input specific / output general;Input : DSL (specific) et Output : UML (general);Semantic Definition;La transformation doit permettre au Ministère des transports autrichien de rendre son système interopérable;Langage ad hoc;"La transformation est semi-automatisée, je cite ""We developed a dedicated metamodel mapping language between the DSL and UML metamodels and a component for automatically generating UML profiles and model transformations from mapping models.""";Industriels;Données issues du Ministère des transports Autrichien;No validation;Aucune validation n'est proposée dans l'article;Exo/Out-place;De DSL vers UML;Académie;Financed by Transport Ministry
9;Kavimandan A., Gokhale A.;Automated middleware QoS configuration techniques using model transformations;2007;http://www.scopus.com/inward/record.url?eid=2-s2.0-52049106833&partnerID=40&md5=285b91b650436f428cbc92d0f33fdc0d;"Kavimandan, A., Dept. of EECS, Vanderbilt University, Nashville, TN, United States; Gokhale, A., Dept. of EECS, Vanderbilt University, Nashville, TN, United States";This paper provides following three contributions to the study of developing and applying model driven engineering (MDE) techniques to Quality of Service (QoS) configuration of distributed real-time and embedded (DRE) systems. First, we describe the challenges associated with mapping domain-level QoS policies of DRE systems to middleware configuration space. Second, we discuss a domain specific modeling language (DSML) to capture QoS requirements of DRE system at a higher level of abstraction, simplifying the system QoS specification process. Third, we describe model transformations to automate the mapping of domain-specific QoS requirements.Our results indicate that our approach provides significant benefits in terms of productivity, scalability, reusability and automation of middleware QoS mapping compared to traditional QoS configuration techniques for publish/subscribe-based DRE systems. _2008 IEEE.;;"Configuration spaces; Distributed Real-time and Embedded Systems; Domain specific modeling language; Domain-specific; DRE systems; Enterprise distributed object computing; Level of abstraction; Model transformations; Model-driven engineering; Publish/subscribe; QoS mapping; QOS requirements; QoS specifications; Computer software; Conformal mapping; Embedded systems; Middleware; Real time systems; Technology; Wave functions; Quality of service";10.1109/EDOCW.2007.5;Structurelle;;input specific / output specific;DSML en entrée et DSML en sortie (middleware);Refinement;Configuration QoS;Langage dédié (QVT…);GReAT;Jouets;;No validation;;Endo/In-place;;Industrie;
10;Reyno E.M., Carsi Cubel J.;Automatic prototyping in model-driven game development;2009;http://www.scopus.com/inward/record.url?eid=2-s2.0-67949106324&partnerID=40&md5=5873243a917bb524b551c65338a3ea36;"Reyno, E.M., Software Engineering and Information Systems Research Group, Technical University of Valencia, Spain; Cars_ Cubel, J., Software Engineering and Information Systems Research Group, Technical University of Valencia, Spain";Model-driven game development (MDGD) is an emerging paradigm where models become first-order elements in game development, maintenance, and evolution. In this article, we present a first approach to 2D platform game prototyping automatization through the use of model-driven engineering (MDE). Platform-independent models (PIM) define the structure and the behavior of the games and a platform-specific model (PSM) describes the game control mapping. Automatic MOFscript transformations from these models generate the software prototype code in C++. As an example, Bubble Bobble has been prototyped in a few hours following the MDGD approach. The resulting code generation represents 93% of the game prototype.;"Game development; Game prototyping; Model-driven engineering; Model-driven game development";"Code Generation; First-order; Game development; Game prototyping; Model-driven; Model-driven engineering; Model-driven game development; Platform specific model; Platform-independent model; Prototyping; Software prototypes; Computer software; Software prototyping; Systems analysis; Game theory";10.1145/1541895.1541909;Structurelle;UML vers code;input general / output general;UML vers code;Semantic Definition;Il s'agit d'une génération automatique de la structure et du comportement (simple changement de modèle mais pas de MM);Langage dédié (QVT…);Utilisation de Platform-independent models (PIM) pour la modélisation de la structure et platform-specific model (PSM) pour les comportements + manuelle;Jouets;Il s'agit d'un prototype de jeu vidéo;Validation empirique;Le code généré est comparé au code réellement nécessaire en nombre de lignes, la génération est de l'ordre de 93-94%;Endo/In-place;De diagramme de classes UML à du code;Académie;L'industrie du jeu vidéo cherche à automatiser la création d'un prototype (génération)
11;Schauerhuber A., Wimmer M., Kapsammer E., Schwinger W., Retschitzegger W.;Bridging WebML to model-driven engineering: From document type definitions to meta object facility;2007;http://www.scopus.com/inward/record.url?eid=2-s2.0-34250784598&partnerID=40&md5=22d2a2cdc74c7c7665d20835c16325ee;"Schauerhuber, A., Women's Postgraduate College of Internet Technologies, Vienna University of Technology, Favoritenstrasse 9-11, Vienna 1040, Austria; Wimmer, M., Business Informatics Group, Vienna University of Technology, Favoritenstrasse 9-11, Vienna 1040, Austria; Kapsammer, E., Information Systems Group, Johannes Kepler University Linz, Altenberger Strasse 69, Linz 4040, Austria; Schwinger, W., Department of Telecooperation, Johannes Kepler University Linz, Altenberger Strasse 69, Linz 4040, Austria; Retschitzegger, W., Information Systems Group, Johannes Kepler University Linz, Altenberger Strasse 69, Linz 4040, Austria";Meta-models are a prerequisite for model-driven engineering (MDE) in general and consequently for model-driven web engineering in particular. Various web modelling languages, however, are not based on meta-models and standards, like object management group's prominent meta object facility (MOF). Instead they define proprietary languages rather focused on notational aspects. Thus, MDE techniques and tools cannot be deployed for such languages preventing to exploit the full potential of MDE in terms of standardised storage, exchange and transformation of models. The WebML web modelling language is one example that does not yet rely on an explicit meta-model in the sense of MDE. Instead, it is defined in terms of a document type definition (DTD), and implicitly within the accompanying tool. Code generation then has to rely on model-to-code transformations based of extensible stylesheet language transformations (XSLT). We propose a meta-model for WebML to bridge WebML to MDE. To establish such a meta-model, instead of remodelling WebML's meta-model from scratch, a semi-automatic approach is provided that allows generating MOF-based meta-models on the basis of DTDs. The meta-model for WebML accomplishes the following aims: first, it represents an initial step towards a transition to employ MDE techniques within the WebML design methodology. Second, the provision of a MOF-based meta-model ensures interoperability with other MDE tools. Third, it represents an important step towards a common meta-model for Web modelling in future. _ The Institution of Engineering and Technology 2007.;;"Computer aided software engineering; Computer simulation languages; Data structures; Mathematical models; XML; Document type definition (DTD); Extensible stylesheet language transformations (XSLT); Model driven engineering (MDE); Metadata";10.1049/iet-sen:20060066;Structurelle;;input general / output general;GP MOF Based;Model Composition;;Langage classique (Java…);Ecore;Jouets;we use part of the concepts used by WebML to represent a Web application’s content layer which in fact resembles the well-known ER-mode;No validation;;Exo/Out-place;;Académie;Le web est ciblé, le vocabulaire rappelle plus l'industrie que l'académie (plus de terme économiques que dans un papiers académique pur).
12;Sterritt A., Cahill V.;Customisable model transformations based on non-functional requirements;2008;http://www.scopus.com/inward/record.url?eid=2-s2.0-51749118704&partnerID=40&md5=86ed22fecaeef136ee8a5356b562494c;"Sterritt, A., Distributed Systems Group, Trinity College Dublin; Cahill, V., Distributed Systems Group, Trinity College Dublin";The Model-to-Model (M2M) transformation stage in a Model-Driven Engineering (MDE) tool chain is used to bridge the large semantic gap between problem-domain abstractions and software artefacts. This transformation is typically specified in a closed, monolithic way. Since no two systems have identical requirements, some work has been done to create explicit support for customisation of the transformation process based on functional requirements. The same is not true for non-functional requirements. The contribution of this paper is a customizable M2M transformation process that takes as an input the users priorities, in terms of non-functional properties, to select between design trade-offs in the transformation. These trade-offs are expressed as contrasting architectural styles, which describe common patterns of interactions and constraints with well understood non-functional implications. The target of the M2M transformation is an Architecture Description Language (ADL) that can be used to express styles. Model checking tools can be used to ensure that styles are adhered to during the entire MDE process. This early work focuses on describing contrasting architectural styles that address distribution issues, such as fault tolerance. _ 2008 IEEE.;;"Architectural styles; Non-functional requirements; Transformation processes; Commerce; Fault tolerance; Information theory; Large scale systems; Process engineering; Quality assurance; Reliability; Systems analysis; Model checking";10.1109/SERVICES-1.2008.61;Structurelle;;input specific / output specific;WRIGHT ADL;Refinement;;Langage dédié (QVT…);ATLas like language;Jouets;;No validation;Les auteurs parlent d'une méthode pour transformer, en décrive précisément le fonctionnement, et viennent ajouter en Future Work, qu'un langage de transfo est encore à choisir…;Exo/Out-place;;Académie;
13;Harbouche A., Erradi M., Mokhtari A.;Deriving multi-agent system behavior;2013;http://www.scopus.com/inward/record.url?eid=2-s2.0-84884544209&partnerID=40&md5=b50eb063699a17d3e7b5f71c9c8137ae;"Harbouche, A., LME Lab, Hassiba BenBouali University, Chlef, Algeria; Erradi, M., SIME Research Lab, ENSIAS, Mohammed V Souissi University, Rabat, Morocco; Mokhtari, A., LRIA Lab, Houari Boumedienne University, Algiers, Algeria";The multi-agent systems (MAS) have become a very powerful paradigm in the development of complex computer systems. The modeling of these systems can reduce this complexity during the development phases. The Model-Driven Architecture (MDA) approach can be used to resolve this problem. It allows designers to model their systems at different abstraction levels, providing them with automatic model transformations to incrementally refine abstract models into concrete ones. This paper presents a MDA approach to develop multi-agent system with the derivation of the behavior of a given system agent from its global requirements. The suggested approach is based on the definition of an appropriate requirements meta-model (Computational Independent Meta-Model CIMM) and the definition of a target design meta-model (Platform Independent Meta-model PIMM). The CIM models are specified using UML activity diagram extended with collaborations to describe the system global behavior. The agent's behavior model (PIM) is in the form of distributed UML state machines. Automatic model transformations between these two models have been designed in order to govern the derivation process. A real application of telediagnosis in neuroscience has been developed using this approach.;"Behavior; Computational independent model; Derivation; Model driven engineering; Model to model transformation";;;Structurelle;;input specific / output general;CIM DSL -> UML StateMachine;Refinement;CIM to PIM;Langage dédié (QVT…);ATL Language;Jouets;Un exemple clair et concret d'implémentation du service d'appel d'urgence d'une hopital : asceptisé, artificiel.;Validation théorique (formel);Artifice+pseudo code => théorie;Exo/Out-place;;Académie;
15;Kim S.-K., Myers T., Wendland M.-F., Lindsay P.A.;Execution of natural language requirements using state machines synthesised from Behavior Trees;2012;http://www.scopus.com/inward/record.url?eid=2-s2.0-84865230441&partnerID=40&md5=28c4f551dfadaae37f1cee034ad9b936;"Kim, S.-K., Software Systems Research Group, Queensland Research Lab, National, ICT, Australia; Myers, T., Griffith University, Nathan, QLD 4111, Australia; Wendland, M.-F., Fraunhofer Institut FOKUS, Berlin, Germany; Lindsay, P.A., Software Systems Research Group, Queensland Research Lab, National, ICT, Australia, School of ITEE, University of Queensland, QLD 4072, Australia";This paper defines a transformation from Behavior Tree models to UML state machines. Behavior Trees are a graphical modelling notation for capturing and formalising dynamic system behaviour described in natural language requirements. But state machines are more widely used in software development, and are required for use with many tools, such as test case generators. Combining the two approaches provides a formal path from natural language requirements to an executable model of the system. This in turn facilitates requirements validation and transition to model-driven software development methods. The approach is demonstrated by defining a mapping from Behavior Trees to UML state machines using the ATLAS Transformation Language (ATL) in the Eclipse Modeling Framework. A security-alarm system case study is used to illustrate the use of Behavior Trees and execution to debug requirements. _ 2012 Elsevier Inc. All rights reserved.;"Behavior Engineering; Behavior Trees; MDE; Model Transformation; Requirements; Requirements Validation; UML State Machine";"Behavior trees; MDE; Model transformation; Requirements; Requirements validation; UML state machine; Alarm systems; Forestry; Requirements engineering; Software design; Computer aided software engineering; Algorithms; Computation; Computer Programs; Forestry; Problem Solving";10.1016/j.jss.2012.06.013;Structurelle;Transformation d'un modèle (behavior trees) vers un autre (UML);input general / output general;Transformation d'un modèle (behavior trees) vers un autre (UML);Language Translation;Le but est de simplifier la modélisation en modélisant avec un behavior trees qui est exprimé en langage naturel et de transformer ce modèle en un autre plus bas niveau;Langage dédié (QVT…);Utilisation d'ATL (dans EMF);Open source;Un système d'alarme déjà utilisé par Prowell et al.;Validation empirique;Etude de cas d'un système d'alarme et validation par simulation;Exo/Out-place;"D'un ""behavior trees"" vers un ""UML state machines""";Académie;Recherche universitaire pour de la recherche
17;Amelunxen C., Schurr A.;Formalising model transformation rules for UML/MOF 2;2008;http://www.scopus.com/inward/record.url?eid=2-s2.0-45849143287&partnerID=40&md5=5cee9d4e0c070821ff1e26e86952ee49;"Amelunxen, C., Real-Time Systems Lab., Darmstadt University of Technology, Merckstrasse 25, Darmstadt 64283, Germany; Sch_rr, A., Real-Time Systems Lab., Darmstadt University of Technology, Merckstrasse 25, Darmstadt 64283, Germany";Model-driven software development, today's state-of-the-art approach to the design of software, can be applied in various domains and thus demands a variety of domain-specific modelling languages. The specification of a domain-specific modelling language's syntax and semantics can in turn be specified based on models, which represent the approach of metamodelling as a special form of language engineering. The latest version of the unified modelling language 2 (UML 2) and its subset the meta object facility 2 (MOF 2) provide sufficient support for metamodelling, a modelling language's abstract syntax. Furthermore, based on the description of the abstract syntax, a language's static semantics can simply be specified by the object constraint language (OCL) as UML/MOF's natural constraint language, whereas the description of an MOF compliant language's dynamic semantics is still not covered. The authors try to close this gap by integrating MOF/OCL with graph transformations for the specification of dynamic aspects of modelling languages and tools. The formalisation of such an integration is non-trivial because of the fact that UML/MOF 2 offer a rather unusual and sophisticated association concept (graph model). Although there are many approaches, which formalise graph transformations in general and first approaches that offer a precise specification of the semantics of the association concepts of UML/MOF 2, there is still a lack in bringing both together. Here, the authors close this gap by formalising graph transformations that work on a UML/MOF 2 compatible graph model. _ 2008 The Institution of Engineering and Technology.;;"Abstracting; Gallium alloys; Graph theory; Information theory; Integration; Models; Object oriented programming; Query languages; Semantics; Software design; Software engineering; Specification languages; Specifications; Syntactics; Unified Modeling Language; (OTDR) technology; Abstract syntax; Applied (CO); Constraint languages; Domain specific; Dynamic aspects; Dynamic semantics; Formalisation; General (CO); graph modeling; Graph transformations; Languages (traditional); Meta object facility (MOF); Meta-modelling; Model driven software development; model transformations; Non-trivial; Object constraint Language (OCL); State-of-the-art approach; Static semantics; Unified Modelling Language (UML); Linguistics";10.1049/iet-sen:20070076;Structurelle;Meta-modelisation de projet (code);input general / output general;Du code vers un meta-modèle général;Model Visualization;Avoir une vue globale de l'organisation du projet;Langage classique (Java…);Pattern fait maison avec des langages classiques : UML like et opération mathématiques;Jouets;Présentation de la transformation sans application industrielle;Validation théorique (formel);Validation mathématique (c'est le goal du papier);Endo/Out-place;Métamodélisation;Académie;Il n'est pas fait mention d'application à l'industrie
18;Yang Z., Hu K., Ma D., Bodeveix J.-P., Pi L., Talpin J.-P.;From AADL to Timed Abstract State Machines: A verified model transformation;2014;http://www.scopus.com/inward/record.url?eid=2-s2.0-84900826199&partnerID=40&md5=0ad3d16afd97d7f87ffb9f20bf15eb94;"Yang, Z., School of Computer Science and Engineering, Beihang University, Beijing, China, IRIT-CNRS, Universit_ de Toulouse, Toulouse, France; Hu, K., School of Computer Science and Engineering, Beihang University, Beijing, China; Ma, D., School of Computer Science and Engineering, Beihang University, Beijing, China; Bodeveix, J.-P., IRIT-CNRS, Universit_ de Toulouse, Toulouse, France; Pi, L., INTECS, Toulouse, France; Talpin, J.-P., INRIA-Rennes, Campus de Beaulieu, Rennes, France";Architecture Analysis and Design Language (AADL) is an architecture description language standard for embedded real-time systems widely used in the avionics and aerospace industry to model safety-critical applications. To verify and analyze the AADL models, model transformation technologies are often used to automatically extract a formal specification suitable for analysis and verification. In this process, it remains a challenge to prove that the model transformation preserves the semantics of the initial AADL model or, at least, some of the specific properties or requirements it needs to satisfy. This paper presents a machine checked semantics-preserving transformation of a subset of AADL (including periodic threads, data port communications, mode changes, and the AADL behavior annex) into Timed Abstract State Machines (TASM). The AADL standard itself lacks at present a formal semantics to make this translation validation possible. Our contribution is to bridge this gap by providing two formal semantics for the subset of AADL. The execution semantics provided by the AADL standard is formalized as Timed Transition Systems (TTS). This formalization gives a reference expression of AADL semantics which can be compared with the TASM-based translation (for verification purpose). Finally, the verified transformation is mechanized in the theorem prover Coq. _ 2014 Elsevier Inc.;"Architecture Analysis and Design Language (AADL); Coq; Model transformation; Model-driven engineering; Semantics preservation; Timed Abstract State Machine (TASM)";"Aerospace industry; Mathematical models; Real time systems; Semantics; Theorem proving; Translation (languages); Architecture analysis and design language (AADL); Coq; Model transformation; Model-driven Engineering; Timed abstract state machines (TASM); Metadata";10.1016/j.jss.2014.02.058;Structurelle;AADL vers TASM;input general / output specific;Simple translation;Language Translation;Le but est de vérifier que la sémantique est préservée lors de cette translation;Langage ad hoc;Méthode maison dont le langage n'est pas précisé;Jouets;Aucune application à un projet industriel;Validation théorique (formel);Méthodologie de vérification de l'exactitude de la translation;Exo/Out-place;Translation d'un formalisme à l'autre sans modifier la sémantique ;Académie;Le but est de vérifier que la sémantique est préservée lors de cette translation
19;Funk M., Nyen A., Lichter H.;From UML to ANSI-C: An eclipse-based code generation framework;2008;http://www.scopus.com/inward/record.url?eid=2-s2.0-57649210777&partnerID=40&md5=dc890e31582356bb18bc74abf12b778e;"Funk, M., Department of Electrical Engineering, Eindhoven University of Technology, Netherlands; Nyen, A., Research Group Software Construction, RWTH Aachen University, Germany; Lichter, H., Research Group Software Construction, RWTH Aachen University, Germany";Model-driven engineering has recently gained broad acceptance in the field of embedded and real-time soft-ware systems. While larger embedded and real-time systems, developed e.g. in aerospace, telecommunication, or automotive industry, are quite well supported by model-driven engineering approaches based on the UML, small embedded and real-time systems, as they can for example be found in the industrial automation industry, are still handled a bit novercal. A major reason for this is that the code generation facilities, being offered by most of the UML modeling tools on the market, do indeed support C/C++ code generation in all its particulars, but neglect the generation of plain ANSI-C code. However, this would be needed for small embedded and real-time systems, which have special characteristics in terms of hard time and space constraints. Therefore we developed a framework, which allows to generate ANSI conformant C code from UML models. It is built on top of Eclipse technology, so that it can be integrated easily with available UML modeling tools. Because flexibility and customizability are important requirements, the generation process consists of a model-to-model transformation between the UML source model and an intermediate ANSI-C model, as well as a final model-to-text generation from the intermediate ANSI-C model into C code files. This approach has several advantages compared to a direct code generation strategy.;"ANSI-C; Code generation; Embedded & real-time systems; UML";"ANSI-C; C codes; C-models; Code generation; Customizability; Direct codes; Generation process; Industrial automations; Model-driven engineerings; Model-to-model transformations; Source models; Time and spaces; UML; Uml modeling tools; UML models; Automotive industry; Embedded systems; Fourier transforms; Network components; Systems analysis; Telecommunication industry; Real time systems";;Comportementale;UML vers modèle ANSI-C intermédiaire puis vers ANSI-C code (texte);input general / output general;Diagramme UML vers code ANSI-C;Refinement;Ecrire du code C standard (ANSI-C) à partir d'un modèle UML;Langage dédié (QVT…);Développement d'un framework utilisant les outils d'Eclipse;Jouets;Utilisation de données d'exemples;No validation;Aucune validation n'est proposée dans l'article;Exo/Out-place;Diagramme UML vers code ANSI-C;Académie;Recherche uniquement : générer du code C standard
20;De Castro V., Mesa J.M.V., Herrmann E., Marcos E.;From real computational independent models to information system models: An MDE approach;2008;http://www.scopus.com/inward/record.url?eid=2-s2.0-84885236205&partnerID=40&md5=eb35d298e364b160590073065a17525e;"De Castro, V., Kybele Research Group, Rey Juan Carlos University, Tulip_n S/N, 28933, M_stoles, Madrid, Spain; Mesa, J.M.V., Kybele Research Group, Rey Juan Carlos University, Tulip_n S/N, 28933, M_stoles, Madrid, Spain; Herrmann, E., Kybele Research Group, Rey Juan Carlos University, Tulip_n S/N, 28933, M_stoles, Madrid, Spain; Marcos, E., Kybele Research Group, Rey Juan Carlos University, Tulip_n S/N, 28933, M_stoles, Madrid, Spain";Model Driven Engineering approaches deal with the provision of models, transformations between them and code generators to address software development. One of the main advantages of this approach is the definition of a conceptual structure where the models used by business managers and analysts can be traced towards more detailed models used by software developers. In this paper we focus on this kind of model transformations, that is, model transformations that allow us obtain behavioural models of the service-oriented information system (Platform Independent Models) from high level business models (Computational Independent Models). From our point of view, the main drawback regarding CIM to PIM transformations lies in the alignment between what we model at CIM and PIM levels, the business view in the former and the information system view in the later. All this given, in this work we analyze, by mean of a case study, how it is possible to integrate both views and therefore, how we can help software developers to take the most of the business knowledge represented in high level business models.;"Computational Independent Models; Information system Models; Model Driven Engineering; Model Transformations";"Business knowledge; Conceptual structures; Independent model; Information system model; Model transformation; Model-driven Engineering; PIM transformation; Platform independent model; Information systems; Mathematical models; Models";;Structurelle;Modèle vers modèle;input general / output general;High level business model to behavior model of the service oriented information system;Semantic Definition;Passer du modèle orienté business au modèle orienté service;Langage dédié (QVT…);we specify the transformation rules using ATL is a model transformation language and toolkit developed by the ATLAS Group (INRIA & LINA).;Jouets;travel agency providing a set of services to its customers;No validation;Aucune validation n'est proposée dans l'article;Exo/Out-place;Business model to Service Oriented System;Académie;"Pour aider l'industrie ""we can help software developers to take the most of the business knowledge represented in high level business models"""
21;Pastor O.;Generating user interfaces from conceptual models: A modeltransformation based approach;2007;http://www.scopus.com/inward/record.url?eid=2-s2.0-84879681495&partnerID=40&md5=ddef90d1021c316aa6dd57f3ed070167;Pastor, _., Department of Information Systems and Computation, Valencia University of Technology, Camino de Vera s/n, 46071 Valencia, Spain;Traditionally, the Software Engineering community has been interested in defining methods and processes to develop software by specifying its data and behavior disregarding user interaction. On the other hand, the Human-Computer Interaction community has defined techniques oriented to the modeling of the interaction between the user and the system, proposing a user-oriented software construction. This paper aspires to reconcile both visions by integrating them in a whole software production process. An approach based on conceptual- schema centric software development is presented, where conceptual primitives intended to specify static, dynamic and interaction aspects are properly provided. Furthermore, Model Transformation techniques are proposed to go from the problem space, represented by the Conceptual Schema, to the solution space, represented by the corresponding final software product. This proposal is underpinned by some current MDA-based technology, which makes user-oriented, model-based software generation a reality. _ 2007 Springer.;"Conceptual modeling of user interface; Functional requirements; Model-based code generation; User interaction and model-driven approach";"Code Generation; Conceptual modeling; Engineering community; Functional requirement; Model driven approach; Model transformation technique; Software construction; Software generation; Computer aided design; Software architecture; Software design; User interfaces";;Structurelle;;input general / output general;OO-Method, UML;Refinement;Génération d'inerfaces selon un modèle donné;Langage dédié (QVT…);OlivaNova Model Execution framework (ONME);Jouets;;No validation;;Exo/Out-place;;Académie;
22;Santos J.P., Moreira A., Araujo J., Goulao M.;Increasing quality in scenario modelling with model-driven development;2010;http://www.scopus.com/inward/record.url?eid=2-s2.0-78751479998&partnerID=40&md5=6997c0285712b8a8c585373db710b0fb;"Santos, J.P., Departamento de Inform_tica, CITI, Universidade Nova de Lisboa, Portugal; Moreira, A., Departamento de Inform_tica, CITI, Universidade Nova de Lisboa, Portugal; Ara_jo, J., Departamento de Inform_tica, CITI, Universidade Nova de Lisboa, Portugal; Goul_o, M., Departamento de Inform_tica, CITI, Universidade Nova de Lisboa, Portugal";Models, with different levels of detail, share similar abstractions that can be reused by means of model-driven techniques such as transformations. For example, scenarios are a well-known technique in requirements engineering to represent behavioral flows in a software system. When using UML, scenarios are typically represented with activity models in the early stages of software development, while sequence models are used to describe more detailed object interactions as modeling progresses. This paper defines transformation rules to automate the migration from activity to sequence models. We present a case study illustrating the application of our transformation rules. Our preliminary assessment of the impact of the benefits of using these transformations points to: (i) a reduction of around 50% in the effort building sequence models, (ii) increased traceability among models, and (iii) error prevention when migrating from different scenario notations. _ 2010 IEEE.;"Model transformations; Model-driven engineering; Scenario modeling";"Activity models; Building sequences; Error prevention; Levels of detail; Model driven development; Model transformation; Model-driven engineering; Model-driven techniques; Object interactions; Preliminary assessment; Scenario modeling; Scenario modelling; Software development; Software systems; Transformation rules; Information technology; Software design";10.1109/QUATIC.2010.36;Structurelle;Modèle vers modèle;input general / output general;Diagramme UML d'activité vers diagramme UML de séquence;Language Translation;Diagramme UML d'activité vers diagramme UML de séquence;Langage dédié (QVT…);"Développement d'un ""plug-in for the Eclipse platform"", utilisation de ""Eclipse Modelling Framework (EMF) and UML2 plug-in for Eclipse""";Open source;Prise dans un autre article www.cs.ubc.ca/grads/resources/thesis/Nov05/Trevor_Young.pdf;Validation empirique;"Etude de cas ""Mobile Media""";Exo/Out-place;Diagramme UML d'activité vers diagramme UML de séquence - Changement de MM;Académie;Recherche universitaire pour de la recherche
24;Milanovic M., Gasevic D., Giurca A., Wagner G., Lukichev S., Devedzic V.;Model transformations to bridge concrete and abstract syntax of web rule languages;2009;http://www.scopus.com/inward/record.url?eid=2-s2.0-77953850056&partnerID=40&md5=ab6df885f0ce090e2720867a5d804590;"Milanovi_, M., GOOD OLD AI Network, FON-School of Business Administration, University of Belgrade, Jove Ili_a 154, 11000 Belgrade, Serbia; Ga_evi_, D., School of Computing and Information Systems, Athabasca University, Canada; Giurca, A., Institute of Informatics, Brandenburg Technical University at Cottbus, Germany; Wagner, G., Institute of Informatics, Brandenburg Technical University at Cottbus, Germany; Lukichev, S., Institute of Informatics, Brandenburg Technical University at Cottbus, Germany; Deved_i_, V., GOOD OLD AI Network, FON-School of Business Administration, University of Belgrade, Jove Ili_a 154, 11000 Belgrade, Serbia";This paper presents a solution to bridging the abstract and concrete syntax of a Web rule languages by using model transforma-tions. Current specifications of Web rule languages such as Semantic Web Rule Language (SWRL) or RuleML define their abstract syntax (e.g., metamodel) and concrete syntax (e.g., XML schema) separately. Although the recent research in the area of Model-Driven Engineering (MDE) demonstrates that such a separation of two types of syntax is a good practice (due to the complexity of languages), one should also have tools that check validity of rules written in a concrete syntax with respect to the abstract syntax of the rule language. In this study, we use the REWERSE I1 Rule Markup Language (R2ML), SWRL, and Object Constraint Language (OCL), whose abstract syntax is defined by using metamodeling, while their textual concrete syntax is defined by using ei-ther XML/RDF schema or Extended Backus-Naur Form (EBNF) syntax. We bridge this gap by a bi-directional transformation defined in a model transformation language (ATLAS Transformation Language, ATL). This transformation allowed us to discover a number of issues in both web rule language metamodels and their corresponding concrete syntax, and thus make them fully compatible. This solution also enables for sharing web rules between different web rule languages.;"Languages; MDE; OCL; R2ML; Rules; SWRL; Syntax; Transformations";;10.2298/CSIS0902047M;Structurelle;Transformation d'une syntaxe concrète (XML Shéma) vers syntaxe abstraite (MOF MM) et vice versa;input general / output general;Transformation d'une syntaxe concrète (XML Shéma) vers syntaxe abstraite (MOF MM);Abstraction;Transformation d'une syntaxe concrète (XML Shéma) vers syntaxe abstraite (MOF MM);Langage dédié (QVT…);Utilisation d'ATL et QVT;Open source;"""set of real world rules collected by the REWERSE Working Group I1 at Brandenburg University of Technology at Cottbus, from different sources such as Warmer and Kleppe’ book [60] and the SWRL specification [29]""";Validation empirique;Expériences;Exo/Out-place;MM ne change pas, les instances oui;Académie;Recherche universitaire pour de la recherche
25;Oscar Díaz, Gorka Puente, Javier Luis Cánovas Izquierdo, Jesús García Molina;Harvesting models from web 2.0 databases;2011;http://link.springer.com/article/10.1007/s10270-011-0194-z;;;;;10.1007/s10270-011-0194-z;Structurelle;;input general / output general;DB to Models;Language Translation;;Langage ad hoc;;Jouets;;No validation;;Exo/Out-place;;Académie;Recherche universitaire pour de la recherche
26;Andreas Fuhr Tassilo Horn Volker Riediger  Andreas Winter ;Model-driven software migration into service-oriented architectures;2013;http://www.scopus.com/inward/record.url?eid=2-s2.0-84872618488&partnerID=40&md5=cb26634b28962cf9696290ce28516fee;"Fuhr, A., Institute for Software Technology, University of Koblenz-Landau, Universit_tsstr. 1, 56070 Koblenz, Germany; Horn, T., Institute for Software Technology, University of Koblenz-Landau, Universit_tsstr. 1, 56070 Koblenz, Germany; Riediger, V., Institute for Software Technology, University of Koblenz-Landau, Universit_tsstr. 1, 56070 Koblenz, Germany; Winter, A., Department of Computing Science Software Engineering, Carl von Ossietzky University Oldenburg, 26111 Oldenburg, Germany";This paper proposes model-driven techniques to extend IBM's SOMA method towards migrating legacy systems into Service-Oriented Architectures (SOA). The proposal explores how graph-based querying and transformation techniques enable the integration of legacy assets into a new SOA and how these techniques can be integrated into the overall migration process. The presented approach is applied to the identification and migration of services in an open source Java software system. _ 2011 Springer-Verlag.;"Model-driven software development; Reengineering; Service-oriented architecture; Software migration";"Java software; Legacy assets; Migration process; Model-Driven Software Development; Model-driven techniques; Open sources; Software migration; Transformation techniques; Information services; Legacy systems; Reengineering; Service oriented architecture (SOA); Open systems";10.1007/s00450-011-0183-z;Structurelle;MDA vers SOA : restructuration de l'information depuis des modèles vers des aspects;input specific / output general;In : WSDL code (interface language description for Web Services) -> UML (manipulé avec Tgraph)  -> Out : Java;Language Translation;MDA vers SOA : traduction;Langage classique (Java…);On utilise ici Java, auquel on ajoute les couches classiques pour la définition de graphs (Tgraph, GraBaJa) et d'aspects (SOAMIG le SOA d'IBM) - non dirigés transformation;Open source;;Validation empirique;Appliquée au GanttProject (pour transformer certaines de ses fonctionnalités en SOA) -> réussite, fonctionnelle, utilisable et utilisé.;Exo/Out-place;;Académie;
27;Mbarki S., Erramdani M.;Model-driven transformations: From analysis to MVC 2 web model;2009;http://www.scopus.com/inward/record.url?eid=2-s2.0-77952312321&partnerID=40&md5=d7cade38a49023fdfaff0d54a5481ad5;"Mbarki, S., Department of Mathematics and Computer Science, Faculty of Science, Ibn Tofail University, BP 133, Kenitra, Morocco; Erramdani, M., Department of Management, EST Mohammed 1 University, Oujda, Morocco";Web applications have the complexity of designing, developing, maintaining, and managing. These systems have increased significantly as well. To cope with this complexity, several frameworks (supporting the MVC 2 pattern) have been elaborated. Facing this diversity and incessant improvement of Web technology, we are in need of developing a tool which is able to produce the code from analysis-level UML models. In this paper, we apply MDA approach for generating code from requirements to MVC 2 Web implementation. That is why we have developed two metamodels handling UML class diagrams and MVC 2 Web applications, then we have to set up two transformations. The first one is a PIM to PIM transformation allowing the refinement of the analysis-level class diagram. The second one is a PIM to PSM transformation for MVC 2 Web applications. _ 2009 Praise Worthy Prize S.r.l - All rights reserved.;"Meta-models; Model driven engineering; Rules transformation; Software engineering; Web applications development";"Class diagrams; MDA approach; Meta model; Model-driven; Model-driven Engineering; PIM transformation; UML class diagrams; UML Model; WEB application; Web implementation; Web models; Web technologies; Computer software; Encoding (symbols); Intermodulation; Intermodulation measurement; Models; Software architecture; Unified Modeling Language; World Wide Web";;Structurelle;UML to MVC2;input general / output general;Input: diag de classe et Output: fichier XML;Language Translation;mapping de concepts entre deux formalismes UML vers MVCWeb;Langage dédié (QVT…);MOF 2.0 QVT;Jouets;we first developed ecore corresponding to our source and target metamodels;Validation empirique;à travers un test mais pas détaillé;Exo/Out-place;transformation entre deux formalismes distincts UML et MVCWeb;Académie;vocation à la recherche académique
28;Buchmann T., Westfechtel B., Winetzhammer S.;Modgraph: A transformation engine for EMF model transformations;2011;http://www.scopus.com/inward/record.url?eid=2-s2.0-80052557692&partnerID=40&md5=d60b3218981c9486929b03a2634fd37c;"Buchmann, T., University of Bayreuth, Universitaetsstrasse 30, 95440, Bayreuth, Germany; Westfechtel, B., University of Bayreuth, Universitaetsstrasse 30, 95440, Bayreuth, Germany; Winetzhammer, S., University of Bayreuth, Universitaetsstrasse 30, 95440, Bayreuth, Germany";Model-driven software engineering aims at increasing productivity by replacing conventional programming with the development of high-level executable models. However, current technology focuses on structural models, while behavioral modeling is still neglected. The transformation engine ModGraph intends to fill this gap. ModGraph complements the Eclipse Modeling Framework with graphical transformation rules from which executable code is generated. An operation defined in an Ecore model is specified by a model transformation rule which is compiled into a Java method calling EMF operations. In this way, ModGraph complements the capabilities of EMF which would compile operations into empty Java methods. The net result is an environment which provides comprehensive support for executable models.;"Code generation; EMF; Graph transformations; Model-driven development; OCL; Pattern matching";"Behavioral modeling; Code Generation; Current technology; Eclipse modeling framework; Executable codes; Executable model; Graph transformations; Java methods; Model driven development; Model transformation; Model-driven; OCL; Structural models; Transformation engine; Transformation rules; Embedded systems; Model structures; Pattern matching; Software engineering; Models";;Structurelle;Input: Ecore diag de classe output: code ;input general / output general;Input: Ecore diag de classe output: code ;Refinement;Refinement: Génération de code;Langage classique (Java…);Java.;Jouets;A running example of a simple calendar application;No validation;Validation absente;Exo/Out-place;Generation de code -> MMs différents;Académie;vocation à la recherche académique
29;Spanoudakis N., Moraitis P.;Modular JADE agents design and implementation using ASEME;2010;http://www.scopus.com/inward/record.url?eid=2-s2.0-78649899730&partnerID=40&md5=42a478deb6775c2c3d1489f13775c4f6;"Spanoudakis, N., Technical University of Crete, Greece; Moraitis, P., LIPADE, Paris Descartes University, France";ASEME is an emerging Agent Oriented Software Engineering (AOSE) methodology. The Model-Driven Engineering (MDE) paradigm encourages software modelers to automate the transition of one type of software model to another and eventually the code generation process. This paper builds on previous work that describes the model-driven development of agent systems using ASEME and creating a Platform Independent Model (PIM) that adheres to the language of statecharts, the Intra-Agent Control Model. In this contribution we use the generated statecharts and show how to automatically transform them to Java programs using the Java Agent Development Framework (JADE). All agent and behaviour classes are automatically generated including the agent interaction protocols. _ 2010 IEEE.;;"Agent control; Agent interaction protocols; Agent Oriented Software Engineering; Agent systems; Automatically generated; Code Generation; Java agent development framework; Java program; Model driven development; Model-driven engineering; Platform independent model; Software model; Statecharts; Intelligent agents; Java programming language; Software engineering; Software agents";10.1109/WI-IAT.2010.136;Comportementale;statechart vs code;input general / output general;statechart vers code JAVA;Refinement;statechart vs code;Langage classique (Java…);JADE;Jouets;it allows the designer to enrich his roles model by introducing variables, agent message;Validation empirique;2 études de cas employées;Exo/Out-place;IAC to Java code;Académie;vocation à la recherche académique
30;Wimmer M., Kusel A., Schoenboeck J., Retschitzegger W., Schwinger W., Kappel G.;On using inplace transformations for model co-evolution;2010;http://www.scopus.com/inward/record.url?eid=2-s2.0-84890500589&partnerID=40&md5=1cea9cb099f8f9651cf71751ff99709c;"Wimmer, M., Vienna University of Technology, Austria; Kusel, A., Johannes Kepler University Linz, Austria; Schoenboeck, J., Vienna University of Technology, Austria; Retschitzegger, W., Johannes Kepler University Linz, Austria; Schwinger, W., Johannes Kepler University Linz, Austria; Kappel, G., Vienna University of Technology, Austria";Metamodel evolution and model co-evolution are considered to be essential ingredients for the successful adoption of model-driven engineering in practice. In this respect, on the one hand, dedicated co-evolution languages have been proposed for migrating models conforming to an initial metamodel to models conforming to a revised metamodel with the drawback of requiring to learn a new language. On the other hand, the employment of dedicated model-to-model transformation languages has been proposed demanding for the specification of rules for copying unchanged elements. In this paper, we propose to tackle the co-evolution problem from a di_rent viewpoint. Instead of describing the co-evolution of models as a transformation between two metamodels, we employ existing inplace transformation languages. For this, the prerequisite is to represent both language versions within one metamodel which is automatically computed by merging the initial and the revised metamodel. This ensures that the initial as well as the revised model conform to the merged meta-model, enabling the employment of inplace transformations for initializing new metamodel elements. Finally, a check-out transformation is used for eliminating model elements which are no longer covered by the revised metamodel.We demonstrate this idea by using ATL for merging the metamodels and realizing the check-out transformation. Furthermore, we discuss the ATL refinement mode for co-evolving the models.;"Inplace transformations; Metamodel merging; Model co-evolution";"Mathematical models; Tools; Co-evolution; Meta model; Meta-model evolutions; Model elements; Model to model transformation; Model-driven Engineering; Revised modeling; Transformation languages; Merging";;Comportementale;Visualisation des évolutions et co-évolutions;input general / output general;Transformation d'un MM à un MM';Analysis;Visualisation des évolutions et co-évolutions;Langage dédié (QVT…);Utilisation d'ATL;Jouets;Données créées pour les besoins de l'étude;No validation;Quelques expérimentations sous forme d'exemples;Endo/In-place;Changement de MM mais travail sur les mêmes instances;Académie;Recherche universitaire pour de la recherche
31;Dan L.;QVT based model transformation from sequence diagram to CSP;2010;http://www.scopus.com/inward/record.url?eid=2-s2.0-79952032701&partnerID=40&md5=ad6baf72a90f16b05acbaa256a5c948f;Dan, L., Faculty of Science and Technology, University of Macau, Macau, China;In a model driven software development paradigm, UML sequence diagrams are used for modeling the interaction view of the software. For an application with high demanding of dependability, formal verification and analysis need to be performed on the sequence diagrams. This is usually done by transforming the sequence diagrams to a well studied formalism that has effective tool support to verification and analysis. In this paper, we propose an approach for transformations from sequence diagrams to CSP processes. The transformations are implemented by using the model driven software engineering standards, such as MOF, QVT, and XSLT. For this, we design the metamodels for sequence diagrams and CSP, and a set of transformation rules are specified using the QVT graphical syntax. The transformation rules are implemented as XSLT rule-based style templates. An XSLT engine reads the XMI file of a sequence diagram produced by an UML CASE tool, and then executes the XSLT templates, outputs the CSP model as an XML file. The XML file of the CSP processes can be translated into the input of a CSP checker for verification. _ 2010 IEEE.;"CSP; Model transformation; QVT; Sequence diagram; XSLT";"CSP; Model transformation; QVT; Sequence diagram; XSLT; Computer software; Graphic methods; Standards; XML; Software design";10.1109/ICECCS.2010.55;Structurelle;SD to CSP;input general / output general;SD to CSP;Language Translation;transformation de SD vers processus CSP;Langage dédié (QVT…);QVT ;Jouets;Another XSLT program, less than 200 lines;No validation;Validation absente;Exo/Out-place;SD in EMF to CSP in XML;Académie;vocation à la recherche académique
33;Denil J., Mosterman P.J., Vangheluwe H.;Rule-based model transformation for, and in simulink;2014;http://www.scopus.com/inward/record.url?eid=2-s2.0-84902009128&partnerID=40&md5=2b54bdaf3be97a69da6119a3d8cbef0b;"Denil, J., MSDL, School of Computer Science, McGill University, Mont_eal, Canada; Mosterman, P.J., MSDL, School of Computer Science, McGill University, Mont_eal, Canada, MathWorks, 3 Apple Hill Drive, Nattick, MA, United States; Vangheluwe, H., MSDL, School of Computer Science, McGill University, Mont_eal, Canada, ANSYMO, University of Antwerp, 2020 Antwerp, Belgium";Over the past decade, the design of embedded systems has come to rely on models as electronic artifacts that are both analysable and executable. Such executable models are at the core of Model-Based Design. Simulink_ is a popular Model-Based Design tool that supports simulation of models in various stages of design. While Simulink supports relating the various different models used in design, the technology to do so relies on the underlying Simulink code base. Instead, this paper employs explicit models of the relations between the various different design models. In particular, a rule-based approach is presented for model-to-model transformations. The abstraction from the code base provides benefits such as a more intuitive representation and the ability to more effectively reason about the transformations. The transformation rules and schedules are designed by augmenting standard Simulink model elements (e.g., blocks) for use in model transformation based on the structured RAMification approach. The approach is illustrated by the transformation of a continuous-time model, part of an adaptive controller, to a disrete-time counterpart, which is consecutively optimized for simulation.;"Model-based design; Model-driven engineering; Model-transformation; Simulink";"Design; Mathematical models; Continuous time models; Model to model transformation; Model-based design; Model-driven Engineering; Model-transformation; Simulation of models; Simulink; Transformation rules; Computer simulation";;Comportementale;Outils de transformation dans et pour Simulink;input general / output general;Simulink expression;Model Composition;Manipulation des modèles dans Simulink;Langage classique (Java…);blocks API of Simulink;Jouets;étude de cas;Validation empirique;étude de cas et simulation;Exo/Out-place;ramification;Industrie;augmentation de l'outil commercial Simulink
36;Madari I., Angyal L., Lengyel L.;Traceability-based incremental model synchronization;2009;http://www.scopus.com/inward/record.url?eid=2-s2.0-73649147046&partnerID=40&md5=1a347b952367737650c94255ccf5e481;"Madari, I., Budapest University of Technology and Economics, Department of Automation and Applied Informatics, Goldmann Gy_rgy t_r 3, 1111 Budapest, Hungary; Angyal, L., Budapest University of Technology and Economics, Department of Automation and Applied Informatics, Goldmann Gy_rgy t_r 3, 1111 Budapest, Hungary; Lengyel, L., Budapest University of Technology and Economics, Department of Automation and Applied Informatics, Goldmann Gy_rgy t_r 3, 1111 Budapest, Hungary";Model transformation is a crucial aspect of Model-Driven Software Development. With the help of model transformation, we can generate source code or other artifacts from software models. However, a recurring problem in software development is the fact that source and target models coexist and they evolve independently. In general, a modeled system is composed of several models that are often related to one another. Consequently, the related models will not be consistent anymore if one of them is altered in the development process. For that reason, a model synchronization method is necessiated to resolve inconsistency between the modified models. Performing synchronization manually can be an error prone task due to the number and complexity of model elements. In model-driven technologies, where processing is carried out as a series of model transformations, applying model transformations can also be a reasonable option for the reconciliation. This paper presents an approach that uses trace models and model transformations to facilitate incremental model synchronization.;"Model synchronization; Model transformation; Trace model; Traceability";"Development process; Error prone tasks; Incremental models; Model elements; Model synchronization; Model transformation; Model-driven; Model-Driven Software Development; Modified model; Software development; Software model; Source codes; Target model; Trace models; Computer software; Software design; Synchronization";;Structurelle;C# syntax tree model and .NET compact framework user interface;input general / output general;C# syntax tree and .NET compact framework ;Semantic Definition;Model synchronization;Langage ad hoc;algorithme proposé par les auteurs;Jouets;données de leur travail précédent;Validation empirique;étude de cas;Exo/Out-place;user interface to code;Académie;To provide development environment for mobile user interfaces
37;Mussbacher G., Kienzle J., Amyot D.;Transformation of aspect-oriented requirements specifications for reactive systems into aspect-oriented design specifications;2011;http://www.scopus.com/inward/record.url?eid=2-s2.0-80455149951&partnerID=40&md5=c1db983b086a89d1a5652be406a773ec;"Mussbacher, G., Dept. of Systems and Comp. Eng., Carleton University, Ottawa, Canada; Kienzle, J., School of Computer Science, McGill University, Montreal, Canada; Amyot, D., School of Elect. Eng. and Comp. Sci., University of Ottawa, Ottawa, Canada";Model-driven engineering (MDE) promises faster and more reliable software development processes. A key factor of MDE is the transformation of models, allowing a software engineer to use the most appropriate modeling notation for a particular task. The earlier transformations can be applied during software development, the greater the potential cost savings. To that effect, we report on the transformation of aspect-oriented models for reactive systems development, i.e., from a scenario-based requirements model into a UML-based design model. We use Aspect-oriented Use Case Maps (AoUCM) as the requirements notation and Reusable Aspect Models (RAM) as the design notation. While AoUCM is ideally suited for the specification of the system workflow comprised of interactions between the environment and the system, RAM excels in providing a design view of system structure and defining the data dimension of the system including inputs and outputs. As the more abstract AoUCM models are transformed into more concrete RAM models, MDE ensures that the AoUCM workflow specifications do not have to be modeled again in RAM, thus avoiding a duplication of effort. We present transformation algorithms to show that an AoUCM-to-RAM mapping is indeed feasible and report on initial tool support for the transformation. _ 2011 IEEE.;"aspects; design models; model driven engineering; requirements; scenario models";"aspects; design models; model driven engineering; requirements; Scenario models; Design; Object oriented programming; Requirements engineering; Specifications; Technical presentations; Software design";10.1109/MoDRE.2011.6045365;Structurelle;from scenario-based requirements to UML-based diagram;input specific / output specific;AUCM to RAM ;Refinement;Model mapping (Requirement Specs to Design Specs);Langage ad hoc;algorithme de transformations;Jouets;Exemples;No validation;Validation absente;Exo/Out-place;AoUCM and RAM;Académie;is part of a research agenda
39;Siqueira F.L., Silva P.S.M.;Transforming an enterprise model into a use case model in business process systems;2014;http://www.scopus.com/inward/record.url?eid=2-s2.0-84906948931&partnerID=40&md5=a42dcbb3ee484e1b2402d0d08170c603;"Siqueira, F.L., Departamento de Engenharia de Computa__o e Sistemas Digitais, Escola Polit_cnica da Universidade de S_o Paulo, Av. Prof. Luciano Gualberto, trav.3, no 158, 05508-900 S_o Paulo, SP, Brazil; Silva, P.S.M., Programa de Educa_ _o Continuada da Escola Polit_cnica da, Universidade de Sao Paulo, Av. Prof. Mello Moraes, no. 2373, 1o. andar, 05508-900Sao Paulo, SP, Brazil";One of the responsibilities of requirements engineering is to transform stakeholder requirements into system and software requirements. For enterprise systems, this transformation must consider the enterprise context where the system will be deployed. Although there are some approaches for detailing stakeholder requirements, some of them even considering the enterprise context, this task is executed manually. Based on model-driven engineering concepts, this study proposes a semi-automatic transformation from an enterprise model to a use case model. The enterprise model is used as a source of information about the stakeholder requirements and domain knowledge, while the use case model is used as software requirements model. This study presents the source and target metamodels, a set of transformation rules, and a tool to support the transformation. An experiment analyzes the use of the proposed transformation to investigate its benefits and if it can be used in practice, from the point of view of students in the context of a requirements refinement. The results indicate that the approach can be used in practice, as it did not influence the quality of the generated use cases. However, the empirical analysis does not indicate benefits of using the transformation, even if the qualitative results were positive. _ 2014 Elsevier Inc.;"Stakeholder requirement; Transformation; Use case";"Hardware; Software engineering; Empirical analysis; Enterprise modeling; Enterprise system; Model-driven Engineering; Software requirements; Stakeholder requirement; Transformation; Transformation rules; Requirements engineering";10.1016/j.jss.2014.06.007;Structurelle;Enterprise model to use case model;input general / output general;Enterprise model to use case model;Abstraction;model mapping;Langage dédié (QVT…);QVT;Jouets;Données proposées par les auteurs VOIR VALIDATION;Validation empirique;expérience menée sur 39 étudiants de l'université;Exo/Out-place;deux métamodèles différents;Académie;vocation à la recherche académique
40;Siqueira F.L., Silva P.S.M., Silva P.S.M.;Transforming an enterprise model into a use case model using existing heuristics;2011;http://www.scopus.com/inward/record.url?eid=2-s2.0-80455145237&partnerID=40&md5=07317d6c7f00b369701d7dfbbaab5bf0;"Siqueira, F.L., Departamento de Engenharia de Computa__o e Sistemas Digitais, Escola Polit_cnica da Universidade de S_o Paulo, S_o Paulo, Brazil; Silva, P.S.M., Departamento de Engenharia de Computa__o e Sistemas Digitais, Escola Polit_cnica da Universidade de S_o Paulo, S_o Paulo, Brazil; Silva, P.S.M., Departamento de Engenharia de Computa__o e Sistemas Digitais, Escola Polit_cnica da Universidade de S_o Paulo, S_o Paulo, Brazil";One of the key responsibilities of Requirements Engineering is to refine requirements into specifications. Although there are some approaches for requirements refinement, this task is usually executed manually. Based on Model-Driven Engineering concepts, this study proposes a semi-automatic transformation using an enterprise model as source and a use case model as target. The underlying hypothesis is that using an enterprise model as a source it is possible to represent both the requirements and the domain knowledge that are necessary to obtain specifications. Considering this hypothesis, this study discusses the proposed transformation and a set of heuristics - found in the analysis of existing studies - using an example, executed with support of a tool. _ 2011 IEEE.;"enterprise model; requirement; specification; transformation; use case";"Domain knowledge; Enterprise models; Model-driven Engineering; requirement; Semi-automatics; transformation; use case; Use case model; Requirements engineering; Specifications; Technical presentations; Industry";10.1109/MoDRE.2011.6045363;Structurelle;Enterprise model to use case model;input general / output general;Enterprise model to use case model;Language Translation;model mappig avec output non exécutable;Langage dédié (QVT…);QVT operational maaping langugage, emucase tool, heuristics description;Jouets;ils ont essayé cela sur un système de prêts de livres (artificiel);Validation empirique;Sur un exemple peu détaillé, on esquisse une validation;Exo/Out-place;Ils utilisent un même métamodèle: diag de classe;Académie;vocation à la recherche académique
41;Jimenez A., Granada D., Bollati V., Vara J.M.;Using ATL to support Model-Driven development of RubyTL model transformations;2011;http://www.scopus.com/inward/record.url?eid=2-s2.0-84890720068&partnerID=40&md5=ae81b13c1d25764e055e809890200b69;"Jim_nez, _., Kybele Research Group, Department of Computing Languages and Systems, Rey Juan Carlos University, C/ Tulip_n s/n, 28933, M_stoles, Madrid, Spain; Granada, D., Kybele Research Group, Department of Computing Languages and Systems, Rey Juan Carlos University, C/ Tulip_n s/n, 28933, M_stoles, Madrid, Spain; Bollati, V., Kybele Research Group, Department of Computing Languages and Systems, Rey Juan Carlos University, C/ Tulip_n s/n, 28933, M_stoles, Madrid, Spain; Vara, J.M., Kybele Research Group, Department of Computing Languages and Systems, Rey Juan Carlos University, C/ Tulip_n s/n, 28933, M_stoles, Madrid, Spain";Model transformations are the main artefact in any Model-Driven Engineering proposal. However, being software artefacts more effort should be dedicated to apply model-driven principles in the development of model transformations. In this context, this work presents some tooling to ease the model-driven development of RubyTL model transformations. In particular, we present a metamodel for RubyTL, a model transformation to move from high-level to RubyTL transformation models and finally a TCS injector/extractor to move from RubyTL models to RubyTL source-code and back.;"Atlas Transformation Language (ATL); Model transformations; Model-Driven Engineering (MDE); RubyTL; Textual concrete syntax (TCS); Transformation models";"Atlas transformation languages; Concrete syntax; Model transformation; Model-driven Engineering; RubyTL; Transformation model; Tools; Mathematical models";;Structurelle;from high level PSM to Ruby TL and code generation;input specific / output general;from high level PSM to Ruby TL;Refinement;serialization which is a specific case of synthesis=refinement (code generation);Langage dédié (QVT…);ATLAS;Jouets;étude de cas diag de classe vers schéma relationnel téléchargeable sur le site web MetAGeM;Validation empirique;Etude de cas;Exo/Out-place;class2Table transformation in the validation;Académie;vocation à la recherche académique
42;Buchmann T., Schwagerl F.;Using meta-code generation to realize higher-order model transformations;2013;http://www.scopus.com/inward/record.url?eid=2-s2.0-84887120710&partnerID=40&md5=d37d5ec6d1398ab01ea86f7ee1bd4122;"Buchmann, T., Department of Applied Computer Science I, University of Bayreuth, Universitaetsstrasse 30, 95440 Bayreuth, Bayreuth, Germany; Schw_gerl, F., Department of Applied Computer Science I, University of Bayreuth, Universitaetsstrasse 30, 95440 Bayreuth, Bayreuth, Germany";Model-driven engineering is a wide-spread paradigm in modern software engineering. During the last couple of years, many tools and languages have been developed, which are especially designed for model transformations - A discipline which is needed in many model-driven engineering approaches. While most of the existing model-to-model tools and languages are tailored towards batch transformations for specific model instances, they lack support for generic transformation problems, where the metamodel is unknown beforehand. In this paper we present a two-step meta-code generation approach that derives a metamodel-specific modelto- model transformation from a model-to-text transformation. The approach has been successfully applied to the problem of product derivation in model-driven software product lines. Copyright _ 2013 SCITEPRESS.;"Higher-order transformations; M2M transformations; Model transformations; Model-driven development; Software product lines";"Generic transformations; Higher-order; Higher-order model transformations; Model driven development; Model transformation; Model-driven Engineering; Model-to-text transformations; Software Product Line; Computer software; Network components; Software design; Tools; Mathematical models";;Structurelle;from domain metamodel to configured domain model;input general / output general;from domain metamodel to configured domain model;Refinement;code generation;Langage dédié (QVT…);Acceleo;Open source;comparing results to the existing, Java-based solution;No validation;Il cite qu'il s'est comparé ses résultats à la conclusion seulement;Exo/Out-place;which enables the specification of a higher-order endogenous;Académie;vocation à la recherche académique
43;Demirezen Z., Mernik M., Gray J., Bryant B.;Verification of DSMLs using graph transformation: A case study with alloy;2009;http://www.scopus.com/inward/record.url?eid=2-s2.0-74949086320&partnerID=40&md5=3c4ba36a9c3a0e67f5b6b46d1cd6f926;"Demirezen, Z., Department of Computer and Information Sciences, University of Alabama at Birmingham, Birmingham, AL 35294-1170, United States; Mernik, M., Department of Computer and Information Sciences, University of Alabama at Birmingham, Birmingham, AL 35294-1170, United States, Faculty of Electrical Engineering and Computer Science, University of Maribor, 2000 Maribor, Slovenia; Gray, J., Department of Computer and Information Sciences, University of Alabama at Birmingham, Birmingham, AL 35294-1170, United States; Bryant, B., Department of Computer and Information Sciences, University of Alabama at Birmingham, Birmingham, AL 35294-1170, United States";Domain-Specific Modeling Languages (DSMLs) enable domain experts to participate in software development tasks and to specify their own programs using domain abstractions. Many Model-Driven Engineering (MDE) platforms primarily concentrate on structural aspects of DSMLs and only provide techniques to define abstract and concrete syntax. Only a few platforms provide built-in support for specification of behavioral semantics and verification tasks. In this paper, we focus on how to specify the behavioral semantics of a DSML by a sequence of graph transformation rules. We also discuss how to transform a DSML specification into Alloy, a model checking tool. These transformations demonstrate that DSML models specified in a visual notation can be verified by means of existing model checking tools. Copyright _ 2009 ACM.;"Activity diagram; Domain-specific modeling languages; Graph transformation systems; Model checking; Operational semantics; Verification";"Activity diagram; Behavioral semantics; Concrete syntax; Domain abstraction; Domain experts; Domain-specific modeling language; Graph Transformation; Graph transformation rules; Graph transformation system; Model checking tools; Model-driven engineering; Operational semantics; Software development; Structural aspects; Verification task; Visual notations; Abstracting; Cerium alloys; Computer simulation languages; Linguistics; Semantics; Software engineering; Specifications; Systems analysis; Model checking";10.1145/1656485.1656488;Structurelle;focus on behavioral semantics of DSL;input specific / output general;input: DSML spec output:Alloy tool;Semantic Definition;Translation entre deux formalismes différents : pour un model checking;Langage dédié (QVT…);graph transformation rules;Jouets;Application à un exemple choisi (le Maze);No validation;Validation absente;Exo/Out-place;Mapping entre deux métamodèles différents;Académie;vocation à la recherche académique
44;Dahman K., Charoy F., Godart C.;Generation of component based architecture from business processes: Model driven engineering for SOA;2010;http://www.scopus.com/inward/record.url?eid=2-s2.0-79951826885&partnerID=40&md5=25c063972eb44e96eaee70302a27f9cc;"Dahman, K., Universit_ de Lorraine, UHP - LORIA, BP 239, 54506 Vandoeuvre-l_s-Nancy Cedex, France; Charoy, F., Universit_ de Lorraine, UHP - LORIA, BP 239, 54506 Vandoeuvre-l_s-Nancy Cedex, France; Godart, C., Universit_ de Lorraine, UHP - LORIA, BP 239, 54506 Vandoeuvre-l_s-Nancy Cedex, France";Service-Oriented Architecture (SOA) has significantly enhanced inter-organizational systems enabling business flexibility, Information Technology (IT) agility, and value generation. However, building a SOA that reduces technology-driven business and leverages process management seems referring to the recurrent issues of business process logic and IT alignment. This paper presents a model-driven development approach where long-running business service composition models drive their supporting service implementation models. To progress on the successful route to a SOA engineering with minimal design decisions losses, we propose a model-to-model transformation that preserves the architectural alignment between the business process and their supporting service implementation infrastructure. The result of the transformation is a component configuration model based on a SOA. It promotes the separation of business concerns, enabling quick and localized evolutions of the IT infrastructure. _ 2010 IEEE.;"BPM; BPMN; Business process logic and IT alignment; MDD; SCA; Service engineering; SOA";"BPM; BPMN; Business process logic and IT alignment; MDD; SCA; Service engineering; SOA; Alignment; Architecture; Information services; Information technology; Service oriented architecture (SOA); Web services";10.1109/ECOWS.2010.14;Structurelle;Translation de BP vers CBA;input general / output general;Business process (XMI) to SCA;Language Translation;Translation de BP vers CBA// BPMN vs SCA metamodels;Langage dédié (QVT…);ATLAS: we use the ATLAS Transformation Language;Jouets;Exemple connu dans la littérature système de gestion de voyages;No validation;Validation absente;Exo/Out-place;mapping ent entre deux formalismes distincts;Académie;peut être valable pour les deux orientations mais j'ai tranché académique
45;Muliawan O., Van Gorp P., Keller A., Janssens D.;Executing a standard compliant transformation model on a non-standard platform;2008;http://www.scopus.com/inward/record.url?eid=2-s2.0-52249118811&partnerID=40&md5=c6c466783d7019d5f7aa3c65478e2797;"Muliawan, O., University of Antwerp; Van Gorp, P., University of Antwerp; Keller, A., University of Antwerp; Janssens, D., University of Antwerp";Model-Driven Engineering is a software development method to model applications at a high level of abstraction and introduce platform specific details automatically using model transformations. Similarly, models specified in human-readable languages can be mapped automatically onto languages that support the analysis of formal properties. In an industrial context, the transformations that automate such mappings should be able to consume input models from various commercial tools. Unfortunately, such tools tend to store models in slightly different ways, not fully compliant to standards. Additional techniques are necessary to develop transformations in a platform independent manner instead of specific ones for each modeling tool. This paper illustrates such techniques on an example related to the transformation of visual process models (UML activity diagrams) into low-level algebraic (CSP) programs that support formal verification. In turn, the platform independent and human-readable transformation model is translated into code that can transform UML inputs even when these are non-standard. _ 2008 IEEE.;;"Commercial tools; Formal properties; Formal verifications; High level of abstraction; Human-readable; Industrial context; Input modeling; International conferences; Model transformations; Model-driven engineering; Modeling tools; Platform independent; Software development; Transformation modeling; UML activity diagrams; Verification and validation; Visual processing; Computer simulation languages; Ketones; Linguistics; Software engineering; Software testing; Standards; Systems analysis; Technology; Unified Modeling Language; Verification; Computer software selection and evaluation";10.1109/ICSTW.2008.16;Structurelle;Translation de UML en CSP;input general / output general;UML -> CSP;Refinement;UML -> CSP (low level);Langage ad hoc;Utilisation de MoTMoT de base + extensions ad hoc;Jouets;Exemples uniquement;No validation;Aucune validation si ce n'est quelques exemples;Exo/Out-place;Translation d'UML à CSP;Académie;Recherche universitaire pour de la recherche
47;Anwar A., Ebersold S., Nassar M., Coulette B., Kriouile A.;A QVT-based approach for model composition application to the VUML profile;2008;http://www.scopus.com/inward/record.url?eid=2-s2.0-55849113397&partnerID=40&md5=5f1c1fa60105fdd355ccff73f9eb30e4;"Anwar, A., University of Toulouse, IRIT, UT2, 5 all_es A. Machado, F-31058 Toulouse, France, LRIMIARF Laboratory, Universit_ Mohammed V-Agdal, Facult_ des Sciences, Rabat, Morocco; Ebersold, S., University of Toulouse, IRIT, UT2, 5 all_es A. Machado, F-31058 Toulouse, France; Nassar, M., SI2M Laboratory, ENSIAS, BP 713 Agdal, Rabat, Morocco; Coulette, B., University of Toulouse, IRIT, UT2, 5 all_es A. Machado, F-31058 Toulouse, France; Kriouile, A., SI2M Laboratory, ENSIAS, BP 713 Agdal, Rabat, Morocco";With the increasing importance of models in software development, many activities such as transformation, verification and composition are becoming crucial in the field of Model Driven Engineering (MDE). Our main objective is to propose a model-driven approach to compose design models. This approach is applied to the VUML profile that allows to analyse/design a system on the basis of functional points of view. In this paper we first describe a transformation-based composition process and then we specify transformations as a collection of QVT-Core rules implemented in ATL. The proposal is illustrated by a simple example.;"Correspondences; Model composition; QVT-Core standard; Transformations; Translation and composition rules; Viewpoints; VUML profile";"Correspondences; Model composition; QVT-Core standard; Transformations; Translation and composition rules; Viewpoints; VUML profile; Management information systems; Models; Systems analysis; Verification; Information systems";;Structurelle;Une approche MDA pour composé les designs de modèles;input general / output general;In : Diagram UML / Out : VuML;Model Composition;UML -> VuML offre un potentiel de visualisation, plus qu'une simple visualisation;Langage dédié (QVT…);QVT core implémenté ATL;Jouets;Un exemple de la représentation Cartesienne et Polaire d'un point dans l'espace : des vues sur le modèle.;No validation;"Liens vers deux autres articles : Case study sur un système d'échange de fichier dans la santé ; implementation in ATL as a standard et intégré aussi dans le M2M project sur Eclipse";Exo/Out-place;Deux métamodèle distincts : UML en entrée, Passage par métamodèle de correspondance, et VUML en sortie ;Académie;conf':ICEIS : Une étude générique dans son procédé mais don’t l'application vise l'industrie.
48;Cui X.;Co-design of the business and software architectures: A systems engineering and model-driven method;2010;http://www.scopus.com/inward/record.url?eid=2-s2.0-77956051529&partnerID=40&md5=79b6badce785c237b650ff0630b8f7db;Cui, X., Beijing Aerospace Control Center, Beijing 100094, China;Software architecture design plays a crucial role for both the software and business success. Most of the existing methods conduct software architecture design driven by the key software requirements, facing the challenges of creating architectures from scratch and aligning with the high-level business goals. In this paper we propose the BASAD (Business And Software Architecture co-Design) method to facilitate alleviating the difficulty of software architecture design and achieving the high-level business goals. The method addresses the business and software architecture design in an integrated process from a systems engineering perspective, leveraging the SysML and UML modeling languages and the automated model transformation from the business architectures to the software architectures, so that provide pragmatic support for the architecture co-design. _ 2010 IEEE.;"Business architecture; Model-driven; Software architecture design; Systems engineering";"Business architecture; Business goals; Business success; Co-designs; Engineering perspective; Existing method; Integrated process; Model transformation; Model-driven; Model-driven method; Software architecture design; Software requirements; UML modeling languages; Artificial intelligence; Design; Software design; Systems engineering; Software architecture";10.1109/SNPD.2010.39;Structurelle;Translation d'un modèle haut abstrait vers le logiciel;input general / output general;Business Architecture (SysML) to Software Architecture (UML);Language Translation;Business Architecture to Software Architecture;Langage dédié (QVT…);"Le framework n'a pas encore été implémenté, il utilisera ""Eclipse Modeling Framework (EMF)""";Jouets;Données d'exemples;No validation;Aucune validation;Exo/Out-place;Changement de niveau d'abstraction;Industrie;"""this paper is motivated by our practices on the business software architecting."" for ""Beijing Aerospace Control Center"""
49;Di Marco A., Pace S.;Model-driven approach to Agilla Agent generation;2013;http://www.scopus.com/inward/record.url?eid=2-s2.0-84883685860&partnerID=40&md5=af44e2dc3dc133c2a7a8e08baebfe918;"Di Marco, A., Department of Computer Engineering, Computer Science, and Mathematics, University of L'Aquila, Via Vetoio, L'Aquila, Italy; Pace, S., Department of Computer Engineering, Computer Science, and Mathematics, University of L'Aquila, Via Vetoio, L'Aquila, Italy";Wireless Sensor Networks are becoming one of the most successful choices for the development and deployment of a wide range of applications, from intelligent homes to environment monitoring. Nowadays, there is a growing demand for fast development of WSN applications that adapt at run-time to changes in the context, in the available resources, and also in user requirements. In this paper we present a model-driven approach that permits to model and automatically generate Agilla Agents. We decide to target Agilla since it is an agent based platform that allows to manage adaptation without service interruptions by means of agents substitution. The proposed approach considers UML (Unified Modeling Language) as modeling language, and consists of a UML Profile to model Agilla agents and of a Model-to-Code transformation that generates Agilla code from the presented UML modeling framework. _ 2013 IEEE.;"Agent; Agilla; Code generation; Model driven engineering; Model to code; Modeling; UML profile; WSN";"Agilla; Code Generation; Model-driven Engineering; Uml profiles; WSN; Agents; Cosine transforms; Embedded systems; Intelligent buildings; Mobile computing; Models; Systems analysis; Wireless sensor networks; Wireless telecommunication systems; Unified Modeling Language";10.1109/IWCMC.2013.6583775;Structurelle;Transformation de diagramme UML en Agilla code (Agent);input general / output general;Transformation de diagramme UML en Agilla code (Agent);Refinement;Generation de code;Langage dédié (QVT…);Utilisation des outils d'Exclipse;Open source;we take an existing Agilla agent from the sample folder of the Agilla project (agents/oscope/oscope 5readings.ma agent),;Validation empirique;Etude de cas avec des données open-source;Exo/Out-place;Diagramme UML vers Agilla code;Académie;Recherche universitaire pour de la recherche
50;Ciccozzi F., Cicchetti A., Siljamaki T., Kavadiya J.;Automating test cases generation: From xtUML system models to QML test models;2010;http://www.scopus.com/inward/record.url?eid=2-s2.0-78650951004&partnerID=40&md5=6e3ccd987af3d2804548efa6a1f811b0;"Ciccozzi, F., M_lardalen University, V_ster_s, Sweden; Cicchetti, A., M_lardalen University, V_ster_s, Sweden; Siljam_ki, T., Ericsson AB, Stockholm, Sweden; Kavadiya, J., Tata Consultancy Services, Hyderabad, Andhra Pradesh, India";The scope of Model-Driven Engineering is not limited to Model-Based Development (MBD), i.e. the generation of code from system models, but involves also Model-Based Testing (MBT), which is the automatic generation of efficient test procedures from corresponding test models. Both MBD and MBT include activities such as model creation, model checking, and use of model compilers for the generation of system/test code. By reusing these common activities, the efficiency of MBT can be significantly improved for those organizations which have already adopted MBD, since one of the major efforts in MBT is the creation of test models. In this work, we propose to exploit modeling activity efforts by deriving test models from system models. In this respect, we present a case study in which the Executable and Translatable UML system models are used for automatically generating test models in the QTronic Modeling Language using horizontal model transformations. In turn, the derived artefacts can be used to produce test cases which result to be appropriate for the system under development. _ 2010 ACM.;"automatic test cases generation; model-based development; model-based testing; model-driven engineering";"Automatic Generation; Automatic test cases generation; Horizontal models; Model compiler; Model creation; model-based development; model-based testing; model-driven engineering; Modeling languages; System models; Test case; Test cases generation; Test models; Test procedures; Automatic programming; Automatic test pattern generation; Belt drives; Embedded software; Models; Testing; Model checking";10.1145/1865875.1865877;Comportementale;Génération automatique de code de test à partir d'un modèle du système (UML);input general / output general;Génération automatique de code de test à partir d'un modèle du système (UML);Model Composition;Génération automatique de code de test à partir d'un modèle du système (UML);Langage dédié (QVT…);Utilisation de QTronic Mod- eling Language;Jouets;Données d'exemples;Validation empirique;Etude de cas avec des exemples;Exo/Out-place;Génération automatique de code de test à partir d'un modèle du système (UML);Académie;Recherche universitaire pour de la recherche
52;Meedeniya D.A., Perera I.;Model based software design: Tool support for scripting in immersive environments;2013;http://www.scopus.com/inward/record.url?eid=2-s2.0-84894421870&partnerID=40&md5=6b8c80d25879eedab1343a086ce2f663;"Meedeniya, D.A., Dept. of Computer Sci. and Engineering (CSE), University of Moratuwa (UoM), Sri Lanka; Perera, I., Dept. of Computer Sci. and Engineering (CSE), University of Moratuwa (UoM), Sri Lanka";We present a prototype tool developed for the transformation of scenario-based specifications. The tool intended to support model based software development, in particular modelling Platform Independent Models (PIMs) for a given scenario and the transformation of the developed model into formalisms. The tool, which we named SD2CPN since it allows to transform the models from Umfied Modelling Language UML 2 Sequence Diagrams (SDs) into Coloured Petri nets (CPNs), helps software engineers to model the complex design scenarios comfortably and enables model checking with analysis of their designed PIMs. The context domain selected for the tool usage is programming in 3 dimensional immersive environments. The SD2CPN tool is evaluated by capturing immersive environment scenarios as SDs and transforming these into CPNs that enable flexible analysis of the state-event based program modelling in the immersive environments. Although the tool is considered for system development in immersive environments the generic nature of PIM support provided make it a general purpose tool for software development irrespective of the application domain and system scenario. _ 2013 IEEE.;"CPNs; Model transformation; Model-driven development (MDD); Programming in immersive environments; UML sequence diagram";;10.1109/ICIInfS.2013.6731990;Structurelle;Sequence Diagram to Coloured PetriNet;input general / output general;Sequence Diagram (plus humain) vers du PetriNet (plus proche du langage machine embarqué LSL - virtuellement ou non));Language Translation;On traduit en PN le diagram de séquence en entrée;Langage classique (Java…);Java + NetBeans;Open source;Transformation testée ici sur OpenSource (un monde virtuel genre SecondLife, et supposée fonctionnée sur SL aussi, techniquement);Validation empirique;C'est ici une présentation de l'outil de transformation au travers d'un exemple de foncitonnement - une preuve empirique de la bonne marche du prototype.;Exo/Out-place;;Académie;L'industrie de l'embarqué est directement ciblée.
54;Girba T., Favre J.-M., Ducasse S.;Using meta-model transformation to model software evolution;2005;http://www.scopus.com/inward/record.url?eid=2-s2.0-24344440798&partnerID=40&md5=195d50e719ad0aeab5b8faaa7a94954f;"G_rba, T., Software Composition Group, University of Bern, Switzerland; Favre, J.-M., LSR-IMAG Laboratory, University of Grenoble, France; Ducasse, S., Software Composition Group, University of Bern, Switzerland";Understanding how software systems evolve is useful from different perspectives: reverse engineering, empirical studies etc.. For an effective understanding we need an explicit meta-model. We introduce Hismo, a meta-model which is centered around the notion of history and we show how we can obtain it from a snapshot meta-model. Based on our experience in developing the Hismo reverse engineering system, we show how we can transform a snapshot meta-model in a history meta-model. _ 2005 Elsevier B.V. All rights reserved.;"MDA; Metamodel; Model driven engineering; Reverse engineering; Software evolution; Software history";"Mathematical models; Metadata; Reverse engineering; MDA; Metamodel; Model driven engineering; Software evolution; Software engineering";10.1016/j.entcs.2005.07.005;Comportementale;Modéliser l'évolution des logiciels;input specific / output specific;En Input : l'entité dont on veut étudier l'évolution => en sortie ces mêmes entités représentées par leur historique et les versions qui le composent (Hismo).;Analysis;On analyse le contenu et on le montre d'un point de vue spécifique (ou encore une décoration);Langage ad hoc;Le langage n'est pas spécifié : ou alors on est trop conceptuel à ce niveau de reflexion, ou alors les auteurs n'attachent pas beaucoup d'importance à leur implémentation. Ça foncitonne c'est ce qu'il cherche - en Java, en C ou en ATL.;Jouets;Un exemple fictif, des résultats fictifs - et justes.;No validation;Les auteurs précise que de valider empiriquement leur tool serait leur prochaine préocupation;Endo/In-place;On modifie ici le modèle de départ - le métamodèle de sortie me semble être un guide de décoration de celui en entrée.;Académie;Software engineering power !
60;Friedrich Steimann;Constraint-Based Model Refactoring;2011;;;"The UML standard specifies well-formedness rules as constraints on UML models. To be correct, refactoring of a model must take these constraintsinto account and check that they are still satisfied after a refactoring has been performed — if not, the refactoring must be refused. With constraint-based refactoring, constraint checking is replaced by constraint solving, lifting the role of constraints from permitting or denying a tentative refactoring to computing additional model changes required for the refactoring to be executable. Thus, to the degree that the semantics of a modelling language is specified using constraints, refactorings based on these constraints are guaranteed to be meaning preserving. To enable the reuse of pre-existing constraints for refactoring, we present a mapping from well-formedness rules as provided by the UML standard to constraint rules as required by constraint-based refactoring. Using these mappings, models can be refactored at no extra cost; if refactorings fail, the lack of meaning preservation points us to how the constraint-based semantic specifications of the modelling language can be improved. ";;;;Structurelle;Refactoring, on utlise deux langages différents;input specific / output specific;Method generique (abstraite) pouvant s'appliquer à plusieurs formalisems;Abstraction;Reverse engineering => abstraction de l'implementation;Langage ad hoc;Sans précision, modèle mathématique;Jouets;;Validation théorique (formel);Chqaue étape de la transformation est décrite mathématiquement;Exo/Out-place;MMs différents;Académie;
63;Syriani E, Ergin H;Operational Semantics of UML Activity Diagram: An Application in Project Management;2012;;;With its recent adoption by the International Organization for Standardization, we foresee that UML will be systematically used for object-oriented modeling in industry. UML activity diagrams have been typically used to model software and business processes. Due to its semi-formal semantics and high complexity, its advanced constructs such as expansion regions, interruptible regions, object nodes, time events, and compound activities are rarely used in practice. There has been significant work on formalizing UML activity diagrams in terms of its semantic domain: Petri net. However, none address the recent advanced constructs it offers. In this paper, we define the semantics of UML activity diagram using a rulebased model transformation. Verification and validation of the UML activity diagram model is then achieved by simulating and analyzing the Petri net model. We illustrate our technique by using an extension of UML activity diagram to facilitate project management tasks such as scheduling, cost estimation, and resource allocation.;;;;Comportementale;D'abord structurelle, puis on simule sur le résultat : comportement;input general / output general;UML activity Diag / Petri net;Language Translation;Activity diagram / Petri net == semantics;Langage dédié (QVT…);Atom;Jouets;;Validation empirique;Par des exemples;Exo/Out-place;On modifie et on traduit ensuite;Académie;
64;Steel J, Drogmuller R;Domain-Specific Model Transformation in Building Quantity Take-off;2011;;;The two core concepts of model-driven engineering are models and model transformations. Domain-Specific Modelling has become accepted as a powerful means of providing domain experts and end users with the ability to create and manipulate models within the systems that they use. In this paper we argue that there are domains for which it is appropriate to also provide domain experts with the ability to modify and develop model transformations. One such domain is that of quantity surveying, and specifically the taking-off of quantities from a building design. We describe a language for expressing transformations between building models and bills of quantities, and its implementation within an automated quantity take-off tool, reflecting on the commonalities and differences between this language and a general-purpose model transformation language/tool.;;;;Structurelle;DSM to DSM;input specific / output specific;;Abstraction;;Langage classique (Java…);Java+EMF;Industriels;example from the field of cost estimation/quantity surveying;No validation;;Exo/Out-place;;Académie;Volumétrie industrielle (gestion des stocks)
65;Hui Song, Gang Huang, Franck Chauvel, Wei Zhang, Yanchun Sun,Weizhong Shao, and Hong Mei;Instant and Incremental QVT Transformation for Runtime Models;2012;;;Abstract. As a dynamic representation of the running system, a runtime model provides a model-based interface to monitor and control the system. A key issue for runtime models is to maintain their causal connections with the running system. That means when the systems change, the models should change accordingly, and vice versa. However, for the abstract runtime models that are heterogeneous to their target systems, it is challenging to maintain such causal connections. This paper presents a model-transformation-based approach to maintaining causal connections for abstract runtime models. We define a new instant and incremental transformation semantics for the QVT-Relational language, according to the requirements of runtime models, and develop the transformation algorithm following this semantics. We implement this approach on the mediniQVT transformation engine, and apply it to provide the runtime model for an intelligent office system named SmartLab.;;;;Structurelle;A key issue for such runtime models is to maintain their causal connections with the systems. That means when the systems change, the models should change accordingly and instantly, and vice versa;input specific / output specific;DSL SmartLab;Semantic Definition;It's a behavioral simulation;Langage dédié (QVT…);QVT-R;Industriels;RFID references with SmartLab = condition indus;Validation empirique;We applied this instant transformation engine to provide the runtime model for a medium-scale smart office system, the SmartLab + p284 toute une batch de reproductions;Endo/In-place;;Académie;Key Lab of High Confidence Software Technologies (China)
66;Mirco Kuhlmann and Martin Gogolla;From UML and OCL to Relationnal Logic and Back;2013;;;Languages like UML and OCL are used to precisely model systems. Complex UML and OCL models therefore represent a crucial part of model-driven development, as they formally specify the main system properties. Consequently, creating complete and correct models is a critical concern. For this purpose, we provide a lightweight model validation method based on efficient SAT solving techniques. In this paper, we present a transformation from UML class diagram and OCL concepts into relational logic. Relational logic in turn represents the source for advanced SAT-based model instance finders like Kodkod. This paper focuses on a natural transformation approach which aims to exploit the features of relational logic as directly as possible through straitening the handling of main UML and OCL features. This approach allows us to explicitly benefit from the efficient handling of relational logic in Kodkod and to interpret found results backwards in terms of UML and OCL.;;;;Structurelle;;input general / output general;UML vers logique relationnelle (SAT-based);Analysis;This approach allows us to explicitly benefit from the efficient handling of relational logic in Kodkod and to interpret found results backwards in terms of UML and OCL;Langage ad hoc;Transformation (and her way back) is described entirely;Jouets;;Validation théorique (formel);"Everything is detailled and ""proved mathematically""";Exo/Out-place;UML+OCL => Relational Logic;Académie;
67;Mathieu Acher, Philippe Lahire, Sabine Moisan, Jean-Paul Rigault;Tackling High Variability in Video Surveillance Systems through a Model Transformation Approac;2009;;;This work explores how model-driven engineering techniques can support the configuration of systems in domains presenting multiple variability factors. Video surveillance is a good candidate for which we have an extensive experience. Ultimately, we wish to automatically generate a software component assembly from an application specification, using model to model transformations. The challenge is to cope with variability both at the specification and at the implementation levels. Our approach advocates a clear separation of concerns. More precisely, we propose two feature models, one for task specification and the other for software components. The first model can be transformed into one or several valid component configurations through step-wise specialization. This paper outlines our approach, focusing on the two feature models and their relations. We particularly insist on variability and constraint modeling in order to achieve the mapping from domain variability to software variability through model transformations.;;;;Structurelle;;input specific / output specific;Presently, both are written as text. We still have to decide on a formalism which should be expressive enough and preferably verifiable;Model Composition;Model Synchronization;Langage ad hoc;"Not working yet : ""In all cases, meta-models of transformations are to be elaborated""";Jouets;Exemples triviaux;No validation;Looks like a short paper;Endo/Out-place;It is convenient to use the same kind of models on both sides, leading to a uniform syntax;Académie;Video surveillance
68;Gerd Kainz, Christian Buck Stephan Sommer and Alois Knoll;Model-to-Metamodel Transformation for the Development of Component-Based Systems;2010;;;Embedded systems are a potential application area for component-based development approaches. They can be assembled from ultiple generic components that can either be application components used to realize the application logic or hardware components to provide low level hardware access. The glue code to connect these components is typically implemented using middleware or run-time systems. Nowadays great parts of the system are automatically generated and configured according to application needs by using model driven software development tools. In a model driven development process, three different kinds of developers can be identified: run-time system experts, component developers and application developers. This paper presents a multi-phase approach, which is suited to support all of these experts in an optimal way. Key idea is a multi-phase development process based on model-to-metamodel transformations connecting the different phases. The advantages of this approach are demonstrated in the context of distributed sensor / actuator systems;;;;Structurelle;Jeu entre DSL;input specific / output specific;From a DSL to another in the sensor/actuator field;Abstraction;model-to-metamodel;Langage ad hoc;Not working yet : le papier décrit le travail du langage de transformation;Jouets;Exemple simple/abstrait ;Validation empirique;Exemple ad-hoc d'un train electrique, simpleé;Exo/Out-place;;Industrie;fortiss, Cyber-Physical Systems
69; Tirdad Rahmani, Daniel Oberle, Marco Dahms ;An Adjustable Transformation from OWL to Ecore;2010;;;Although there are sufficient similarities between the W3C Web Ontology Language OWL and the software modeling language Ecore, little research has been conducted into approaches which allow software engineers to incorporate existingWeb ontologies into their familiar Ecore-based software engineering environments. This is becoming important since the number of significant Web ontologies is growing and software engineers are increasingly challenged to build software relying on such ontologies. Therefore, we propose an automatic transformation between OWL and Ecore, that is adjustable between the two extremes of a result which is simple to understand, or a result, which preserves as much as possible of the source ontology. The transformation is realized as an Eclipse plug-in and, thus, integrates seamlessly with a software developer’s familiar environment;;;;Structurelle;;input general / output general;OWL to Ecore+OCL;Language Translation;an automatic transformation between OWL and Ecore;Langage classique (Java…);Implementation en un plugin Eclipse;Jouets;Exemples d'illustration - simples;No validation;Description (quasi)formelle, mais pas de validation réelle;Exo/Out-place;;Industrie;SAP
70; António Miguel Rosado da Cruz, João Pascoal Faria ;A Metamodel-Based Approach for Automatic User Interface Generation;2010;;;One of the advantages of following a MDA-based approach in the development of interactive applications is the possibility of generating multiple platform-specific user interfaces (UI) from the same platform independent UI model. However, the effort required to create the UI model may be significant. In the case of data-intensive applications, a large part of the UI structure and functionality is closely related with the structure and functionality of the domain entities described in the domain model, and the access rules specified in the use case model. This paper presents an approach to reduce the effort required to create platform independent UI models for data intensive applications, by automatically generating an initial UI model from domain and use case models. For that purpose, UML-aligned metamodels for domain and use case models are defined, together with a MOF-based metamodel for user interface models. The transformation rules that drive the UI model generation are introduced. It is also proposed a MDA-based process for the development of data intensive interactive applications based on the proposed model architecture and transformations;;;;Structurelle;;input specific / output general;From UML+specification (profile style : Domain Model et Use Case Model) to textcode;Refinement;Code generation;Langage ad hoc;Sans objet : papier théorique sans implémentation;Jouets;;No validation;;Exo/Out-place;;Académie;
71; Kyriakos Anastasakis, Behzad Bordbar, Geri Georg, Indrakshi Ray  ;UML2Alloy: A Challenging Model Transformation;2007;;;Alloy is a formal language, which has been applied to modelling of systems in a wide range of application domains. It is supported by Alloy Analyzer, a tool, which allows fully automated analysis. As a result, creating Alloy code from a UML model provides the opportunity to exploit analysis capabilities of the Alloy Analyzer to discover possible design flaws at early stages of the software development. Our research makes use of model based techniques for the automated transformation of UML class diagrams with OCL constraints to Alloy code. The paper demonstrates challenging aspects of the model transformation, which originate in fundamental differences between UML and Alloy. We shall discuss some of the differences and illustrate their implications on the model transformation process. The presented approach is explained via an example of a secure e-business system.;;;;Structurelle;;input general / output general;From UML to Alloy;Analysis;Etude de graph UML  gâce aux outils Alloy;Langage ad hoc;UML2Alloy : le papier décrit le travail du langage de transformation;Jouets;;No validation;;Exo/Out-place;;Académie;
72; Juan de Lara, Esther Guerra, Artur Boronat, Reiko Heckel, Paolo Torrini ;Domain-specific discrete event modelling and simulation using graph transformation;2012;;;Graph transformation is being increasingly used to express the semantics of domain-specific visual languages since its graphical nature makes rules intuitive. However, many application domains require an explicit handling of time to accurately represent the behaviour of a real system and to obtain useful simulation metrics to measure throughputs, utilization times and average delays. Inspired by the vast knowledge and experience accumulated by the discrete event simulation community, we propose a novel way of adding explicit time to graph transformation rules. In particular, we take the event scheduling discrete simulation world view and provide rules with the ability to schedule the occurrence of other rules in the future. Hence, our work combines standard, efficient techniques for discrete event simulation (based on the handling of a future event set) and the intuitive, visual nature of graph transformation. Moreover, we show how our formalism can be used to give semantics to other timed approaches and provide an implementation on top of the rewriting logic system Maude;;;;Comportementale;We propose a novelway of adding explicit time to graph transformation rules;input specific / output specific;GT rules enable the direct use of the DSML concrete syntax to describe its timed semantics without resorting to encodings in external simulation languages;Semantic Definition;Behavioral analysis through simulation;Langage dédié (QVT…);Maude (a GraphTransfo-like-tool-implementation..);Jouets;A usability study of this enhanced implementation is left for future work;Validation empirique;Implementation pour l'exemple (utilisation de Maude);Exo/Out-place;;Académie;
73; Kelly Garcés, Juan M. Vara, Frédéric Jouault, Esperanza Marcos  ;Adapting transformations to metamodel changes via external transformation composition;2012;;;Evolution is inherent to software systemsbecause of the rapid improvement of technologies and business logic. As a software development paradigm, model driven engineering (MDE) is also affected by this problem. More concretely, being metamodels the cornerstone of MDE, their evolution impacts the rest of software artefacts involved in a development process, i.e., models and transformations. The influence over models has been tackled and partially solved in previous works. This paper focuses on the impact over transformations. We propose an approach to adapt transformations by means of external transformation composition. That is, we chain impacted transformations to particular adaptation transformations which deal with either refactoring/destruction changes or construction changes. Our approach semi-automatically generates such transformations by using the AtlanMod matching language, a DSL to define model matching strategies. To provide with a proof of concept for our proposal, we adapt transformations written in terms of object-relational database metamodels when such metamodels evolve in time.;;;;Comportementale;an approach to adapt transformations by means of external transformation composition;input specific / output specific;DSL to DSL;Semantic Definition;Metamodel behavioral analysis through simulation;Langage ad hoc;Transformation de transformation : le papier décrit le travail du langage de transformation;Industriels;Des exemples pris du monde industriel;Validation empirique;Exemple annoté et précis SQL2003 vers SQL2003_EVO avec le framework M2DAT-DB pour transfo en Oracle10i;Exo/Out-place;;Industrie;Représentants de AtlanMOD
74;Javier Luis Cánovas Izquierdo, Jesús García Molina;Extracting models from source code in software modernization;2012;;;Model-driven software modernization is a discipline in which model-driven development (MDD) techniques are used in the modernization of legacy systems. When existing software artifacts are evolved, they must be transformed into models to apply MDD techniques such as model transformations. Since most modernization scenarios (e.g., application migration) involve dealing with code in general-purpose programming languages (GPL), the extraction of models from GPL code is an essential task in a model-based modernization process. This activity could be performed by tools to bridge grammarware and MDD technical spaces, which is normally carried out by dedicated parsers. Grammar-to-Model Transformation Language (Gra2MoL) is a domain-specific language (DSL) tailored to the extraction of models from GPL code. This DSL is actually a text-to-model transformation language which can be applied to any code conforming to a grammar. Gra2MoL aims to reduce the effort needed to implement grammarware-MDD bridges, since building dedicated parsers is a complex and time-consuming task. Like ATL and RubyTL languages, Gra2MoL incorporates the binding concept needed to write mappings between grammar elements and metamodel elements in a simple declarative style. The language also provides a powerful query language which eases the retrieval of scattered information in syntax trees. Moreover, it incorporates extensibility and grammar reuse mechanisms. This paper describes Gra2MoL in detail and includes a case study based on the application of the language in the extraction of models from Delphi code;;;;Structurelle;;input general / output specific;From code to DSL;Abstraction;From code to DSL;Langage ad hoc;Gra2MoL might be considered the first proposal for a text-to-model language;Jouets;;Validation empirique;"""The language has been applied a several case studies""";Exo/Out-place;;Académie;
75; Yingfei Xiong, Hui Song, Zhenjiang Hu, Masato Takeichi ;Synchronizing concurrent model updates based on bidirectional transformation;2011;;;Model-driven software development often involves several related models. When models are updated, the updates need to be propagated across all models to make them consistent. A bidirectional model transformation keeps two models consistent by updating one model in accordance with the other. However, it does not work when the two models are modified at the same time. In this paper we first examine the requirements for synchronizing concurrent updates. We view a synchronizer for concurrent updates as a function taking the two original models and the two updated models as input, and producing two new models where the updates are synchronized. We argue that the synchronizer should satisfy three properties that we define to ensure a reasonable synchronization behavior. We then propose a new algorithm to wrap any bidirectional transformation into a synchronizer with the help of model difference approaches. We show that synchronizers produced by our algorithm are ensured to satisfy the three properties if the bidirectional transformation satisfies the correctness property and the hippocraticness property. We also show that the history ignorance property contributes to the symmetry of our algorithm. An implementation of our algorithm shows that it worked well in a practical runtime management framework;;;;Structurelle;Etude du comportement en comparant deux état fixes du système : We design an algorithm that uses model difference approaches to wrap any bidirectional transformation into a synchronizer for concurrent updates;input specific / output specific;"Définition formelle de la transformation : ""Our approach is general and predictable""";Model Composition;Model Synchronization;Langage ad hoc;Le langage n'est pas précisé, l'implentation est libre.;Open source;Des exemples du mon open source, avec benchmark de perfomances et comparaisons;Validation empirique;"A case study : ""We have used our algorithm to implement the runtime management feature of ArchStudio [17], in which a C2-style software architecture model and a runtime system model are synchronized.";Endo/Out-place;Comparing models, merging and synchronizing;Académie;
76; Haiping Zha, Wil M. P. van der Aalst, Jianmin Wang, Lijie Wen, Jiaguang Sun ;Verifying workflow processes: a transformation-based approach;2010;;;"Workflow modeling is a challenging activity and designers are likely to introduce errors, especially in complex industrial processes. Effective process verification is essential at design time because the cost of fixing errors during runtime is substantially higher. However, most user-oriented workflow modeling languages lack formal semantics that hinders such verification. In this paper, we propose a generic approach based on the model transformation to verify workflow processes. The model transformation includes two steps: first, it formalizes the desirable semantics of each modeling element; secondly, it translates a workflow process with clear semantics to an equivalent Petri net. Thus, we can verify the original workflow process using existing Petri net theory and analysis tools. As a comprehensive case study, verifying workflow processes in an industrial modeling language (TiPLM) is presented. Experimental evaluations on verifying real-world business processes validate our approach.";;;;Structurelle;Transformation INTO PetriNet and then behavior analysis;input specific / output general;DSL to PetriNet;Analysis;"""we propose a generic approach based on the model transformation to verify workflow processes.""";Langage dédié (QVT…);TiPLM;Industriels;"""verifying workflow processes in an industrial modeling language (TiPLM) is presented""";Validation empirique;"""Experimental evaluations on verifying real-world business processes validate our approach.""";Exo/Out-place;DSL->PetriNet MM distincts;Industrie;Workflow
77; Kyriakos Anastasakis, Behzad Bordbar, Geri Georg, Indrakshi Ray  ;On challenges of model transformation from UML to Alloy;2008;;;The Unified Modeling Language (UML) is the de facto language used in the industry for software specifications. Once an application has been specified, Model Driven Architecture (MDA) techniques can be applied to generate code from such specifications. Since implementing a system based on a faulty design requires additional cost and effort, it is important to analyse the UML models at earlier stages of the software development lifecycle. This paper focuses on utilizing MDA techniques to deal with the analysis of UML models and identify design faults within a specification. Specifically, we show how UML models can be automatically transformed into Alloy which, in turn, can be automatically analysed by the Alloy Analyzer. The proposed approach relies on MDA techniques to transform UML models to Alloy. This paper reports on the challenges of the model transformation from UML class diagrams and OCL to Alloy. Those issues are caused by fundamental differences in the design philosophy of UML and Alloy. To facilitate better the representation of Alloy concepts in the UML, the paper draws on the lessons learnt and presents a UML profile for Alloy;;;;Structurelle;;input general / output general;From UML to Alloy;Analysis;Etude de graph UML  gâce aux outils Alloy;Langage dédié (QVT…);XMI reader + KentMF + SiTra ;Jouets;Illustration par un exemple simple;No validation;;Exo/Out-place;UML -> Alloy;Académie;
78; Zef Hemel, Lennart C. L. Kats, Danny M. Groenewegen, Eelco Visser ;Code generation by model transformation: a case study in transformation modularity;2009;;;The realization of model-driven software development requires effective techniques for implementing code generators for domain-specific languages. This paper identifies techniques for improving separation of concerns in the implementation of generators. The core technique is code generation by model transformation, that is, the generation of a structured representation (model) of the target program instead of plain text. This approach enables the transformation of code after generation, which in turn enables the extension of the target language with features that allow better modularity in code generation rules. The technique can also be applied to ‘internal code generation’ for the translation of high-level extensions of a DSL to lower-level constructs within the same DSL using model-to-model transformations. This paper refines our earlier description of code generation by model transformation with an improved architecture for the composition of model-to-model normalization rules, solving the problem of combining type analysis and transformation. Instead of coarse-grained stages that alternate between normalization and type analysis, we have developed a new style of type analysis that can be integrated with normalizing transformations in a fine-grained manner. The normalization strategy has a simple extension interface and integrates non-local, context-sensitive transformation rules. We have applied the techniques in a realistic case study of domain-specific language engineering, i.e. the code generator for WebDSL, using Stratego, a high-level transformation language that integrates model-to-model, model-to-code, and code-to-code transformations.;;;;Structurelle;;input specific / output general;;Refinement;Génération de code;Langage dédié (QVT…);Stratego;Open source;WebDSL : 146pg / 2366lignes of text;Validation empirique;Exemple WebDSL => code;Exo/Out-place;DSL->code;Académie;
79;"Hilken, F.; Hamann, L.; Gogolla, M. ";Transformation of UML and OCL Models into Filmstrip Models;2014;;;;;;;Structurelle;;input general / output specific;UML+OCL pure -> UML+OCL extended;Editing;;Langage classique (Java…);Java;Jouets;;Validation empirique;Avec plugin emf available pour replication;Endo/Out-place;;Académie;
80;"Hermann, F. (1); Gottmann, S. (1); Nachtigall, N. (1); Ehrig, H. (2); Braatz, B. (1); Morelli, G. (3); Pierre, A. (3); Engel, T. (1); Ermel, C. (2) ";Triple Graph Grammars in the Large for Translating Satellite Procedures;2014;;;;;;;Structurelle;"""The source and target models in the present scenario are abstract syntax trees of source code.""";input specific / output specific;Syntax trees : from PIL to SPELL;Language Translation;;Langage dédié (QVT…);EMF Graph transformation tools Henshin+Xtext (TGG);Industriels;Within SES (Société Européenne des Sateliites;Validation empirique;Exemple dans SES (société des Satellites Européens);Exo/Out-place;;Industrie;European Satellites
81;"van den Bos, J. (1); van der Storm, T. (1) ";Domain-Specific Optimization in Digital Forensics;2012;;;;;;;Structurelle;From DSL to code;input specific / output general;DSL Derric to Code;Refinement;From description to code;Langage classique (Java…);Rascal (DSL) + Java;Industriels;Gygabyte files;Validation empirique;"Exemple simplifié : ""To evaluate the effect of the transformations we have applied them on three Derric file format specifications, namely for JPEG, GIF and PNG. We have run the resulting 3×4 = 12 carver  onfigurations on a representative disk image of 1TB, containing over a million recoverable files. We have then compared the difference in runtime performance, precision and recall between the configurations"" ";Exo/Out-place;;Industrie;Forensic
83;"Wagelaar, D. (1); Iovino, L. (2); Di Ruscio, D. (2); Pierantonio, A. (2) ";Translational Semantics of a Co-evolution Specific Language with the EMF Transformation Virtual Machine;2012;;;;;;;Structurelle;;input general / output general;EMFMigrate to EMFTVM;Semantic Definition;Translationnal semantics from DSL  : to fulfil the cognitive gap;Langage dédié (QVT…);ATL;Jouets;;No validation;"""In any case, the completeness analysis for the EMFMigrate-to-EMFTVM compiler has not been done: the EMFMigrate language is still under  development, and additional language semantics are likely required";Exo/Out-place;EMF style;Académie;
84;"Cunha, J. (1); Fernandes, J.P. (1); Mendes, J. (1); Pacheco, H. (1); Saraiva, J. (1) ";Bidirectional transformation of model-driven spreadsheets;2012;;;;;;;Comportementale;"""We present techniques for model-driven spreadsheet engineering where we employ bidirectional transformations to maintain spreadsheet models and instances synchronized""";input general / output general;"""the generation of a spreadsheet instance from a ClassSheet model; the evolution of the model and the automatic co-evolution of the data; the evolution of the data and the automatic co-evolution of the model";Model Composition;Synchronization;Langage ad hoc;Transformation (and her way back) is described entirely);Jouets;;No validation;;Endo/Out-place;;Académie;"""We have created an extension to the OpenO ce Calc spreadsheet system so that it offers a model-driven software development environment"
86;"Syriani, E. (1); Vangheluwe, H. (1) ";Programmed graph rewriting with time for simulation-based design;2008;;;;;;;Comportementale;Simulation-based design;input general / output general;ATOM3 + Discrete Event System Specification (DEVS);Semantic Definition;Simulation;Langage dédié (QVT…);MoTif;Industriels;PacMan;Validation empirique;Multiple simuation experiments on the PacMan case study : a benchmark;Endo/In-place;;Académie;
88;"Pérez-Castillo, R. (1); de Guzmain, I.G. (1); Piattini, M. (1) ";Implementing Business Process Recovery Patterns through QVT Transformations;2010;;;;;;;Structurelle;KDM to BPMN;input general / output general;Knowledge Discovery Metamodel KDM to Business Process Model and NotationN;Abstraction;;Langage dédié (QVT…);  Marble and QVT-Relations;Industriels;SourceTapCRM : sales management system;Validation empirique;" ""In order to select an appropriate case under study, the most suitable legacy system, the following criteria are defined: (i) the system should be a real-life system; and (ii) it should be an enterprise system""";Exo/Out-place;Abstraction vers BPMN;Académie;
89;"GrÃ¸nmo, R. (1); MÃ¸ller-Pedersen, B. (1) ";From Sequence Diagrams to State Machines by Graph Transformation;2010;;;;;;;Structurelle;Sequence to Statemachine;input general / output general;;Language Translation;;Langage dédié (QVT…);GraphTransfo : AGG Tool;Jouets;;Validation empirique;Exemples don’t GasPump évoqué comme un classique;Exo/Out-place;;Industrie;SINTEF Norway
91;"van Amstel, M.F. (1); van den Brand, M.G.J. (1); Protic, Z. (1); Verhoeff, T. (1) ";Transforming process algebra models into UML state machines: bridging a semantic gap?;2008;;;;;;;Structurelle;"Not direct transfo, but in steps ""Therefore we split the transformation into four independent steps""";input general / output general;Algebra of Communicating Processes (ACP) process algebra transformed into his tree representation to UML-like state machine (wich ends in her XMI representation);Language Translation;;Langage dédié (QVT…);ASF+SDF;Jouets;"""Several case studies""";Validation empirique;Case studies jouet;Exo/Out-place;;Académie;
92;Jácome Cunha, João Saraiva, Joost Visser;From Spreadsheets to Relational Databases and Back;2009;;;;;;;Structurelle;;input general / output general;;Language Translation;;Langage dédié (QVT…);Haskell;Open source;"""we will use a well-known example spread-sheet taken from (Connolly and Begg 2002)"" Information about housing rental…";No validation;"""The approach forms a baseline for further veri cation and validation processes on the  lmstrip modelby being compatible to a maximum number of application models with only one generic transformation. Basic ideas of test objectives have been provided.";Exo/Out-place;;Académie;
100;Mathias Kleiner2, Marcos Didonet Del Fabro1, and Davi De Queiroz Santos1;Transformation as Search;2013;;;;;;;Structurelle;Generic : from a MM to another;input general / output general;MM expressed in EMF as Ecore instances. Use case : class schema into relationnal schema (but not specified and then specifics);Model Visualization;Search : a specific point of vew : a new vizualisation of the domain;Langage dédié (QVT…);ATL;Open source;With a link to the replication's package;Validation empirique;Use case;Exo/Out-place;;Académie;
101;Tao Yue, Shaukat Ali;Bridging the Gap between Requirements and Aspect State Machines to Support Non-functional Testing: Industrial Case Studies;2012;http://link.springer.com/chapter/10.1007%2F978-3-642-31491-9_12;;;;;;Structurelle;Use cases to Aspect state machine (UML profile);input general / output general;UML et Uml Profile;Abstraction;"""To cope with such complexity, Aspect-Oriented Modeling (AOM) is often recommended""";Langage ad hoc;Platform aToucan : mapping described rule after rule in an esoteric lamguage. ;Industriels;"""The running example is a simplified subsystem (called Saturn) of a communication system (Video Conferencing System (VCS)) developed by Cisco Systems Inc, Norway";Validation empirique;Industrial case study;Exo/Out-place;UML -> UML Profile (AOM);Industrie;
103;Simon Schwichtenberg,  Christian Gerth , Zille Huma ,Gregor Engels ;Normalizing Heterogeneous Service Description Models with Generated QVT Transformations;2014;http://link.springer.com/chapter/10.1007%2F978-3-319-09195-2_12;;;;;;Structurelle;"""we present an holistic approach to resolve the structural and terminological heterogeneity of rich service description models""";input general / output general;"""we assume that such a data schema is specifed in terms of a Uni ed Modeling Language (UML) class model and escribes the relevant concepts of a certain domain, e.g., tourism or banking. Consequently, complex data types are referred to as classes, primitive types as attributes, and instances of types as objects""";Editing;"""By executing the transformation, behavioral models are automatically normalized""";Langage dédié (QVT…);QVT;Jouets;With a lot of restricitons (in 7, Conclusion and Future Work);Validation empirique;Implentation au sein d'un Workbench (Rich Service Description Language (plugin Eclipse, EMF…);Exo/Out-place;;Académie;
104;Gábor Bergmann;Translating OCL to Graph Patterns;2014;http://link.springer.com/chapter/10.1007%2F978-3-319-11653-2_41;;;;;;Structurelle;;input general / output general;"""a large sublanguage of OCL expressions to equivalent graph patterns in the dialect of EMF-IncQUery""";Language Translation;;Langage ad hoc;"Mapping described : Abstract for relationnal representation ; concrete mappings for simple expresssions ; Mapping High order OCL mapping : they call it OCL2IQ";Jouets;"""a sample instance model""";Validation empirique;"""Finally, the graph queries automatically generated using the proposed transformation (OCL2IQ) perform similarly to manually written EMF-IncQuery code (EIQ), outperforming pure Java as well as stateless or incremental OCL-based approaches"" On the input model of 213K elements + instructions for reproduction""";Exo/Out-place;;Académie;
106;Imran S. Bajwa,Mark G. Lee ;Transformation Rules for Translating Business Rules to OCL Constraints;2011;http://link.springer.com/chapter/10.1007%2F978-3-642-21470-7_10;;;;;;Structurelle;;input general / output general;From Semantic of Business Vocabulary and Rules (SVBR) language to OCL;Editing;"""The presented method softens the process of creating OCL constraints and also assists the designers by simplifying software designing process.""";Langage ad hoc;Mapping described in spoken language (SBVR is spoken like)  + SiTra library used to implement it;Jouets;A prototype as a tool to evaluate usability of the approach;Validation empirique;"""The presented approach implemented in SBVR2OCL prototype tool as a proof of concept""";Exo/Out-place;;Académie;
107; Tao Yue, Lionel C. Briand, Yvan Labiche ;An Automated Approach to Transform Use Cases into Activity Diagrams;2010;http://link.springer.com/chapter/10.1007%2F978-3-642-13595-8_26;;;;;;Structurelle;Use Case to Activity Diagram;input general / output general;Use case to Activity Diagram;Language Translation;;Langage ad hoc;Mapping described rule after rule in spoken language (or alike);Industriels;Simplified example of an industrial case (VCS for a Cisco conference in Norway );Validation empirique;We used five different software system descriptions (18 use cases altogether) to assess our approach. They are from different sources: three are from textbooks and two were created by Masters students. Since the UCSs of these systems come from different sources, they were re-written by applying RUCM.;Exo/Out-place;;Industrie;
109;Tao Yue,Shaukat Ali,Lionel Briand ;Automated Transition from Use Cases to UML State Machines to Support State-Based Testing;2011;http://link.springer.com/chapter/10.1007%2F978-3-642-21470-7_9;;;;;;Structurelle;Use Case to UML State machine;input general / output general;Use Case to UML State machine;Language Translation;;Langage ad hoc;Platform aToucan : mapping described rule after rule in an esoteric lamguage. ;Industriels;Simplified example of an industrial case (VCS for a Cisco conference in Norway );Validation empirique;"""we evaluated our approach on an industrial application, where we modeled use case specifications of a video conferencing system developed by Cisco Norway""";Exo/Out-place;;Industrie;
110;Gehan M. K. Selim,Shige Wang,James R. Cordy,Juergen Dingel;Model Transformations for Migrating Legacy Models: An Industrial Case Study;2012;http://link.springer.com/chapter/10.1007%2F978-3-642-31491-9_9;;;;;;Structurelle;;input specific / output specific;"""The implemented transformation converts domainspecific GeneralMotors models to their equivalent AUTOSAR models""";Language Translation;;Langage dédié (QVT…);ATL;Industriels;;Validation empirique;"""Validation is performed manually. For an input GM model, an expected output AUTOSAR model is created in the MDWorkbench Model Editor.  The transformation‘s output model is compared with the manually-created model. Equivalence of the models implies a correct transformation.""";Exo/Out-place;;Industrie;
111;Ulrich Winkler,Mathias Fritzsche,Wasif Gilani,Alan Marshall ;BOB the Builder: A Fast and Friendly Model-to-PetriNet Transformer;2012;http://link.springer.com/chapter/10.1007%2F978-3-642-31491-9_31;;;;;;Structurelle;;input specific / output general;DSL to Petri Net;Language Translation;;Langage ad hoc;BOB himself;Jouets;An running exemple all along the paper;No validation;;Exo/Out-place;;Industrie;
112;Dominik Gessenharter,Martin Rauscher;Code Generation for UML 2 Activity Diagrams;2011;http://link.springer.com/chapter/10.1007%2F978-3-642-21470-7_15;;;;;;Structurelle;UML to Code;input general / output general;UML to Java;Refinement;Code generation;Langage classique (Java…);Java;Jouets;"""For evaluation of our prototype, we modeled an information system for public transportation of an imaginary city and generated code from that model""";Validation empirique;The structural model consists of 17 classes, 14 associations and 3 association classes, the behavioral model consists of a single activity of 14 Actions, 8 control flows and 15 object flows;Exo/Out-place;;Académie;
116; Hugo Brunelière,Jordi Cabot,Cauê Clasen,Frédéric Jouault,Jean Bézivin ;Towards Model Driven Tool Interoperability: Bridging Eclipse and Microsoft Modeling Tools;2010;http://link.springer.com/chapter/10.1007/978-3-642-13595-8_5;;;;;;Structurelle;;input specific / output specific;DSLs : for illustration : bridge between DSL Tools (Eclipse) and Microsoft DSL tools et SQL Server Modeling;Language Translation;;Langage ad hoc;Described from high level of abstraction;Jouets;L'exemple, suivi de loin.;No validation;;Exo/Out-place;;Académie;
117;Michael Eichberg,Martin Monperrus,Sven Kloppenburg,Mira Mezini;Model-Driven Engineering of Machine Executable Code;2010;http://link.springer.com/chapter/10.1007/978-3-642-13595-8_10;;;;;;Structurelle;;input general / output general;XML-Schema - XSLT to Scala code;Analysis;;Langage classique (Java…);Prolog;Jouets;;No validation;;Exo/Out-place;;Industrie;
118;Raphael Romeikat, Stephan Roser, Pascal Mullender, and Bernhard Bauer;Translation of QVT Relations into QVT Operationnal Mappings;2008;;;;;;;Structurelle;;input general / output general;QVT Relations vers QVT Operational Mappings;Language Translation;High order transformation : from a Transfo to another;Langage dédié (QVT…);QVT;Jouets;"""Besides some other small examples, the UML to RDBMS transformation was taken to evaluate our translation approach and implementation. For this purpose, we executed a series of Relations transformations with ModelMorf [15], which is an execution engine for Relations""";Validation empirique;Cf. Commetaire données;Exo/Out-place;;Académie;
119;Guillaume Hillairet, Frédéric Bertrand, and Jean Yves Lafaye;Rewriting Queries by Means of Model Transformations from SPARQL to OQL and Vice-Versa;2009;;;;;;;Structurelle;;input general / output general;SPARQL (RDF query language) to OQL;Language Translation;"""a novel application area for model transformations""";Langage dédié (QVT…);ATL;Jouets;Un exemple en filigrane de l'article, pour illustrer, nada mas.;No validation;An exemple, to illustrate, but too small and precise to be a validation;Exo/Out-place;;Académie;The last case is not yet supported by our implementation
